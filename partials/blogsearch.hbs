{"posts":[{"id":"5f4d767403252603cd76240b","uuid":"41258276-887e-4968-8a97-4faeafc4901e","title":"Automatically Purge Azure CDN Content using Event Grid & Azure Automation Runbook","slug":"automatically-purge-azure-cdn-content-using-event-grid-azure-automation-runbook","html":"<p></p><!--kg-card-begin: markdown--><h2 id=\"theproblem\">The Problem</h2>\n<!--kg-card-end: markdown--><p>After a while of not posting any blog content and migrating my blog from AWS to Azure, I quickly find that posting new content after generating static content of my blog and have it uploaded, I have to manually go into Azure CDN profile to have the cache purged for the new content to become visible via my domain. This will quickly become a repetitive task and I wanted to automate this process and safe me time from manually purging the CDN and at the same time, spend little to nothing on costs in doing so. I currently host my blog on Azure blob storage as a static site. Azure has amazing services to do just that.</p><!--kg-card-begin: markdown--><h2 id=\"theproposedsolution\">The proposed solution</h2>\n<!--kg-card-end: markdown--><p>Azure offer amazing services to help resolve this issue. The proposed solution is summarised as follows; Azure storage blob emits an event whenever new contents are uploaded. Azure Event Grid listens to the event and notifies interested subscriber(s) about the event raised by the blob storage. Event Grid triggers a webhook attached to an automation Powershell runbook which purges the CDN cached contents thereby allowing for the new contents to become available immediately after new content is uploaded to the blob storage.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://localhost:2368/content/images/2020/08/Auto-purge-cdn-with-labels-1.png\" class=\"kg-image\" alt srcset=\"http://localhost:2368/content/images/size/w600/2020/08/Auto-purge-cdn-with-labels-1.png 600w, http://localhost:2368/content/images/2020/08/Auto-purge-cdn-with-labels-1.png 826w\" sizes=\"(min-width: 720px) 720px\"></figure><!--kg-card-begin: markdown--><h2 id=\"thedetails\">The Details</h2>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><img class=\"center\" src=\"https://docs.microsoft.com/en-us/azure/iot-hub/media/iot-hub-event-grid/event-grid-functional-model.png\" width=\"70%\"/><!--kg-card-end: html--><p></p><p>In short, Azure Event Grid enables you to build event-driven architecture and capable of integrating with a lot of Azure Services. This post will focus on implementing the proposed solution without going into details on what Event Grid is. <a href=\"https://docs.microsoft.com/en-us/azure/event-grid/overview\">Feel free to read more on Azure Event Grid here</a>.</p><p>This post assumes you already have an Azure CDN profile in place  as we won't be creating one in this post. Refer to this link if you need to create an Azure CDN; <a href=\"https://docs.microsoft.com/en-us/azure/cdn/cdn-create-new-endpoint\">Quickstart: Create an Azure CDN profile and endpoin</a>t.</p><!--kg-card-begin: markdown--><h2 id=\"azmodulesetup\">Az Module set up</h2>\n<!--kg-card-end: markdown--><p>The Azure run book is the hander of the event and will subsequently run the Powershell code to trigger and purge the CDN profile of its cached content. Let's begin by creating an Azure automation account.</p><p><br>From the Azure portal navigate to Automation Accounts and create an account.</p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2Fcreate-automation.png?v=1598919613247\" width=\"50%\" /><!--kg-card-end: html--><p></p><p>Next navigate to the newly created automation account and nagivate to <strong>Modules </strong>blade under the Shared Resources section.  We will be installing the Powershell Azure Az modules needed to run the Powershell scripts.</p><p>Azure currently provides two Powershell modules to interact with Azure resources and they are AzureRM and Az Modules. Azure recommends the use of Az module going forward as AzureRM will not be officially maintained from December 2020. More details here.</p><p>Click on Browse Gallery and install the following modules:</p><p><strong>Az.Account</strong> - <em>For authenticating and authorising with Azure</em></p><p><strong>Az.Resources</strong> - <em>For interacting with Azure resources</em></p><p><strong>Az.Cdn</strong> - <em>For manipulating Azure CDN resources</em></p><p><strong>Az.Automation</strong> - <em>For interraction with Azure automation</em></p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2Fbrowse-gallery.png?v=1598921318059\" width=\"60%\" /><!--kg-card-end: html--><p></p><p>The search bar type <strong>Az.</strong> and hit the enter key on your computer and you should see results similar to the image below.  Find all the module listed above and import them. See an example below.</p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2FAzModules.png?v=1598921530692\" width=\"60%\"/>\n<p>      </p>\n<p>Import example</p>\n\n<img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2FAz-module-install.png?v=1598921818534\" width=\"60%\"/><!--kg-card-end: html--><!--kg-card-begin: markdown--><h2 id=\"theautomationrunbook\">The Automation Runbook</h2>\n<!--kg-card-end: markdown--><p>Now we have the <strong>Az modules</strong> setup and ready to go. Let's now create the Powershell runbook that will contain the scripts need to get the connection to our Azure automation account, authenticate and authorise with Azure, get details of our CDN and purge its content.</p><p>Navigate back to the Automation account and click <strong>Runbooks </strong>under the Process Automation blade or section and click on Create a runbook. Fill in the name of your runbook, choose Powershell as the Runbook type and give it a description of your choosing.</p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2Fcreate-run-book.png?v=1598922699175\" width=\"60%\" /><!--kg-card-end: html--><p></p><p>Copy and paste the below Powershell script into the newly created Powershell runbook.</p><pre><code class=\"language-C#\">    \"Grabbing the connection...\"\n    $connectionName = \"AzureRunAsConnection\"\n\n    $cdnProfileName = \"your cdn profile\"\n    $RGName = \"your Resource Group\"\n    $CdnEndpointName = \"Your Cdn Endpoint Name\"\n    $AutomationAccountName = \"Your Automation Account Name\"\n\n\n    try{\n        $servicePrincipalConnection =  Get-AutomationConnection -Name $connectionName\n\n        \"Logging in to Azure....\"\n        Connect-AzAccount `\n            -ServicePrincipal `\n            -TenantId $servicePrincipalConnection.TenantId `\n            -ApplicationId $servicePrincipalConnection.ApplicationId `\n            -CertificateThumbprint $servicePrincipalConnection.CertificateThumbprint\n    }\n    catch{\n        if(!$servicePrincipalConnection){\n            $ErrorMessage = \"Connection $connectionName not found.\"\n            throw $ErrorMessage\n        }else{\n            Write-Error -Message $_.Exception\n            throw $_.Exception\n        }\n    }\n\n    \"Fetching the CDN custom domain name....\"\n    $customDomain = (Get-AzCdnCustomDomain -ResourceGroupName $RGName -ProfileName $cdnProfileName -EndpointName ghost)[0].HostName\n\n    \"Purging everything in the CDN with domain name: $customDomain ....\"\n    Unpublish-AzCdnEndpointContent `\n        -ProfileName $cdnProfileName `\n        -ResourceGroupName $RGName `\n        -EndpointName $CdnEndpointName `\n        -PurgeContent \"/*\"</code></pre><p></p><!--kg-card-begin: markdown--><h2 id=\"testingpublishingtherunbook\">Testing &amp; Publishing the Runbook</h2>\n<!--kg-card-end: markdown--><p>It's time to test and publish the runbook. Still, on the runbook, you created the last time, click on the <strong>Test pane</strong> and click the <strong>Start </strong>button to manually trigger the runbook.</p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2FTest-pane.png?v=1598948912467\" width=\"60%\" /><!--kg-card-end: html--><p></p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2Fstart-test.png?v=1598948902788\" width=\"60%\" /><!--kg-card-end: html--><p></p><p>If everything properly implemented, the Powershell runbook should start running and have the status displayed in the job stream log and when the test is completed successfully, a completed status along with the stream is displayed.</p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2Frunbook-running.png?v=1598949423180\" width=\"60%\" /><!--kg-card-end: html--><p></p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2Frunbook-test-completed.png?v=1598949552700\" width=\"60%\" /><!--kg-card-end: html--><p></p><p>Navigating to Azure CDN profile and inspecting the activity log, you should now see a Purge operation with a Succeeded status, how long the operation took and the service principal that initiated the action which is the AzureRunAsConnection we agreed for Azure to create when we created the automation account. Behind the scene, Azure created this service principal of type AzureServicePrincipal with Azure Active Directory (AAD) to save us the plumbing details. For more details visit the connections blade under the shared resources section of your automation account to see details this service principal.</p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2Factivity_log_purge_cdn.png?v=1598950444163\" width=\"90%\" /><!--kg-card-end: html--><p></p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2Fautomation-account-service-principal.png?v=1598951096093\" width=\"90%\" /><!--kg-card-end: html--><p></p><p>Now we have a working Powershell runbook ready to be triggered. Let wire up a webhook that will trigger the runbook.</p><p></p><!--kg-card-begin: markdown--><h2 id=\"thewebhook\">The Webhook</h2>\n<!--kg-card-end: markdown--><p>Azure automation runbook can expose an HTTP endpoint or webhook whichever makes sense. In the context of Azure automation runbook, it's called webhook. The webhook, in this case, is analogous to a different or channel with which messages and triggers get to the runbook.</p><p>To create the webhook, navigate to the runbook you have created and tested and click on <strong>Add webhook</strong>, select <strong>Create new webhook</strong>, enter your preferred name for the webhook, select enabled, set the expiry date, ensure you keep the webhook URL for later use and click OK and Create to create your webhook.</p><p></p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2FAdd-webhook.png?v=1599117698680\" width=\"70%\" /><!--kg-card-end: html--><p></p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2Fto-add-webhook.png?v=1598964798968\" width=\"70%\" /><!--kg-card-end: html--><p></p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2Fcreate-webhook-expiry-date-URL.png?v=1598964798779\" width=\"70%\" /><!--kg-card-end: html--><p></p><p></p><!--kg-card-begin: markdown--><h2 id=\"theeventgrid\">The Event Grid</h2>\n<!--kg-card-end: markdown--><p>Before I go any further I would like to clarify that Event Grid System Topics are system topics in Event Grid that represents events published by Azure services such as Event Hubs, Azure storage account. Here is a <a href=\"https://docs.microsoft.com/en-us/azure/event-grid/system-topics#azure-services-that-support-system-topics\">list of Azure services that supports system topics</a>.</p><blockquote>To be able to use Event Grid System Topics, Event Grid services has to be enabled on your Azure account on the subscription level otherwise, Azure services raising events and subscribers/handler for those events will not work.</blockquote><p>If you don't have the EventGrid enabled, you can navigate to your Azure subscription and in the Resource Provider section under Settings, type Event in the search bar, select <strong><em>Microsoft.EventGrid, </em></strong>click Register/Re-register and give it a little while to complete the setup. Once completed, you should see a green checkmark with the status of <strong><em>Registered.</em></strong></p><p></p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2Fregister-Event-Grid.png?v=1598970108952\" width=\"70%\" /><!--kg-card-end: html--><p></p><!--kg-card-begin: markdown--><h2 id=\"gluingeverythingtogether\">Gluing everything together</h2>\n<!--kg-card-end: markdown--><p>As you may have noticed, Azure provides various ways of achieving the same thing. We could go create an Event Grid System Topics and manually work through the steps or we could go via the resource whose event we are interested in and in this case, the azure blob in a storage account. Since we have Event Grid registered, we are ready to go complete the final piece by doing the later.</p><p>Navigate the Azure resource you want its events to be raised and navigate to on the <em><strong>Events</strong>. </em>For this walk through, I want my event raised from the storage account where I host my static site.</p><p>From the Events blade, click Event Subscription to create the subscription</p><p></p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2Fpre-create-event-storageaccount.png?v=1598971087071\" width=\"60%\" /><!--kg-card-end: html--><p></p><p>Fill in the parts to have the subscription created. Remember to use the webhook URL we created in the Webhook section of this post, click confirm the selection.</p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2Fcreate-susbscription-webhook.png?v=1598971390483\" width=\"70%\" /><!--kg-card-end: html--><p>Next, you want to add a filter to the event such that your storage account doesn't fire off event for every blob created across the storage account but limit it to a specific container(s) or event blob. To do this, we have to filter the event and Event Grid is brilliant for that. using the subject filter of <strong><em>/blobServices/default/containers/&lt;containername&gt;/ </em></strong></p><p>This filter rule says Blob Created events should <strong><em><u>only</u></em></strong> be raised for blob(s) in the container with the name <em>&lt;containername&gt;</em> and in my case, it's <em>$web. </em>This locks the events raised from the storage account to the container level, thereby saving costs and not having events fire when you don't need them to.</p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2FEvent-filtering.png?v=1598972199474\" width=\"70%\" /><!--kg-card-end: html--><p></p><p>Once the subscription is created, at this point you should have everything wired up together and ready to do. You should now have your storage account subscriptions or your Azure resource events subscriptions similar to the image below.</p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2FCreated%20storage%20account.png?v=1598972866483\" width=\"80%\" /><!--kg-card-end: html--><p></p><p>After running a couple of tests via your event producer, in my case, the blob storage where I have my static site hosted, observing the event subscription that we created, you should see the metrics of the event that has occurred and its state.</p><!--kg-card-begin: html--><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2Fevent-test-result-result.png?v=1598973557672\" width=\"90%\" /><!--kg-card-end: html--><p></p><!--kg-card-begin: markdown--><h2 id=\"thecosts\">The Costs</h2>\n<!--kg-card-end: markdown--><p>The cost of Event Grid is £0.448 per million operations while the first 100,000 operations are free per month. Applying the filter as we discussed and reduce the amount of event executed, you may never have to pay for the Event Grid. The monthly free 100,000 operations would do the job just fine. <a href=\"https://azure.microsoft.com/en-gb/pricing/details/event-grid/\">More details of Event Grid pricing here.</a></p><p></p><!--kg-card-begin: markdown--><h2 id=\"summary\">Summary</h2>\n<!--kg-card-end: markdown--><p>In this blog post, the use of Event Grid combined with Azure automation to help automate a process that would otherwise take painstaking time to do. This lays the groundwork to build event-based, decoupled and robust architecture. A good number of Azure resources supports integration with Event Grid and provide a varying number of possibilities.</p><p></p><!--kg-card-begin: markdown--><h2 id=\"additionalresources\">Additional Resources</h2>\n<!--kg-card-end: markdown--><p><a href=\"https://azure.microsoft.com/en-gb/pricing/details/event-grid/\">Event Grid Pricing</a></p><p><a href=\"https://docs.microsoft.com/en-us/azure/automation/automation-connections\">Managing Connections in Azure Automation</a></p><p><a href=\"https://docs.microsoft.com/en-us/azure/cdn/cdn-manage-powershell#purgingpre-loading-cdn-assets\">Purging/Pre-loading CDN assets</a></p><p><a href=\"https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-event-overview#filtering-events\">Filtering Events in EventGrid</a></p><p><a href=\"https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-event-overview#practices-for-consuming-events\">Reacting to Blob Storage Events</a></p>","comment_id":"5f4d767403252603cd76240b","feature_image":"http://localhost:2368/content/images/2020/08/PurgeCDN-1.png","featured":true,"visibility":"public","send_email_when_published":false,"created_at":"2020-08-31T23:15:16.000+01:00","updated_at":"2020-09-03T08:23:28.000+01:00","published_at":"2020-09-01T18:09:03.000+01:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"url":"http://localhost:2368/automatically-purge-azure-cdn-content-using-event-grid-azure-automation-runbook/","excerpt":"\n\nThe Problem\nAfter a while of not posting any blog content and migrating my blog from AWS to\nAzure, I quickly find that posting new content after generating static content\nof my blog and have it uploaded, I have to manually go into Azure CDN profile to\nhave the cache purged for the new content to become visible via my domain. This\nwill quickly become a repetitive task and I wanted to automate this process and\nsafe me time from manually purging the CDN and at the same time, spend little to\nnothi","reading_time":8,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null},{"id":"5f37e7a7d486c307401b3ef1","uuid":"48fea536-27a0-489b-98f1-998089a573c7","title":"Domain Event Pattern","slug":"untitled-2","html":"<p>Domain Event pattern with in-built .Net Core IoC Container, scrutor and .Net Core console application. Source code for this post can be found <a href=\"https://github.com/mcvavy/DomainEvent\">here</a></p><p>This post focuses on the abstract of Domain Event in Domain Driven Design (DDD) which is also a fundamental building block of microservices or eventing system.</p><!--kg-card-begin: html--><p class=\"space\"></p><!--kg-card-end: html--><blockquote>An event is something that has happened in the past. A domain event is, something that happened in the domain that you want other parts of the same domain (in-process) to be aware of. The notified parts usually react somehow to the events.</blockquote><!--kg-card-begin: html--><p class=\"space\"></p><!--kg-card-end: html--><!--kg-card-begin: markdown--><h2 id=\"dependencyinjectiondoesnoteliminatetightcoupling\">Dependency Injection does not eliminate tight coupling</h2>\n<!--kg-card-end: markdown--><p>While this post is not specific to microservices, the domain event pattern can be implemented in any system to reduce tight coupling  between your services. An example would be an MVC controller with a lot of dependencies, services or repositories injected via constructor injection.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://hadihariri.com/images/dtmd-1.png\" class=\"kg-image\" alt></figure><!--kg-card-begin: markdown--><p>Adapting Udi Dahan's <a href=\"http://udidahan.com/2009/06/14/domain-events-salvation/\">Domain Events Salvation</a> post to .Net Core implementation.</p>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><h2 id=\"raisingeventswithsideeffectswithinasystem\">Raising Events with side effects within a system</h2>\n<!--kg-card-end: markdown--><p>Without injecting any dependencies at compile time, any part of a system can have task completed without having prior knowledge of handler that would handle the commands. Some of the example we would look at includes, completing an order by raising an event and having the proper handler located which will handle the event such as writing the order to a data store or sending an email to the customer.</p><p>In the interest of time we'll talk about a domain object and we'll see how that interacts with the system and you may refer to the source code further to see other examples or feel free to leave any questions.</p><!--kg-card-begin: html--><p class=\"space\"></p><!--kg-card-end: html--><p></p><!--kg-card-begin: markdown--><h2 id=\"thedomainobject\">The Domain Object</h2>\n<!--kg-card-end: markdown--><pre><code class=\"language-csharp\">    public class Order\n    {\n        public Guid OrderId { get; private set; }\n        public DateTime OrderDate { get; private set; }\n        public int NumberOfItems { get; set; }\n        public string OrderName { get; private set; }\n        \n        public Order(int numberOfItems, string orderName)\n        {\n            OrderId = Guid.NewGuid();\n            OrderDate = DateTime.UtcNow;\n            NumberOfItems = numberOfItems;\n            OrderName = orderName;\n        }\n\n        public void OrderComplete()\n        {\n            DomainEvent.Raise(new OrderCompletedEvent(DateTime.UtcNow, this));\n        }\n    }</code></pre><p>The order domain object has a behavior such that when an order is created, it broadcasts an OrderCompletedEvent event of itself to the DomainEvent or Dispatcher and any handler that knows how to handle the event will respond and handles it. These handlers can also be referred to as Event Listeners or Subscribers.</p><p>The event is raised via the DomainEvent which is a static class. DomainEvent static class knows about all of the event handler and able to locate and invoke the right event handler for a given event. More about the DomainEvent shortly.</p><!--kg-card-begin: html--><p class=\"space\"></p><!--kg-card-end: html--><!--kg-card-begin: markdown--><h2 id=\"theordercompletedevent\">The OrderCompletedEvent</h2>\n<!--kg-card-end: markdown--><pre><code class=\"language-csharp\">    public class OrderCompletedEvent : IDomainEvent\n    {\n        public DateTime OrderCreatedDate { get; private set; }\n        public Order Order { get; private set; }\n        \n        \n        public OrderCompletedEvent(DateTime orderCreatedDate, Order order)\n        {\n            OrderCreatedDate = orderCreatedDate;\n            Order = order;\n        }\n    }</code></pre><p>The OrderCompletedEvent class implements an interface without any contract to implement merely decorating the class as a type called IDomainEvent.</p><pre><code class=\"language-csharp\">public interface IDomainEvent{}</code></pre><p>The OrderCompletedEvent has an instance of the Order object and it's duty is to transport the Order object along with any needed property or behavior to the handler.</p><!--kg-card-begin: html--><p class=\"space\"></p><!--kg-card-end: html--><!--kg-card-begin: markdown--><h2 id=\"thedomainevent\">The DomainEvent</h2>\n<!--kg-card-end: markdown--><p>The DomainEvent is responsible for some behaviors and they include</p><blockquote>Registering handler manually via its Register method</blockquote><blockquote>Forwarding an event to the proper handler by iterating over all handlers for a particular type resolved from the IoC container</blockquote><p>An IoC container is not required but imagine if you have to manually register tens of handlers in your system.</p><pre><code class=\"language-csharp\">    public static class DomainEvent\n    {\n        [ThreadStatic]\n        private static List&lt;Delegate&gt; _actions;\n\n        public static IServiceProvider _serviceProvider { get; set; }\n\n        \n        public static void Register&lt;T&gt;(Action&lt;T&gt; callback) where T : IDomainEvent\n        {\n            _actions = _actions ?? new List&lt;Delegate&gt;();\n            _actions.Add(callback);\n        }\n\n        public static void ClearCallbacks()\n        {\n            _actions = null;\n        }\n\n        public static void Raise&lt;T&gt;(T args) where T : IDomainEvent\n        {\n            if (_serviceProvider != null)\n            {\n                //Fetch all handler of this type from the IoC container and invoke their handle method.\n                foreach (var handler in (IEnumerable&lt;IDomainHandler&lt;T&gt;&gt;)_serviceProvider\n                    .GetService(typeof(IEnumerable&lt;IDomainHandler&lt;T&gt;&gt;)))\n                {\n                    handler.Hanle(args);\n                }\n            }\n            \n            if (_actions != null)\n            {\n                foreach (var action in _actions)\n                {\n                    if (action is Action&lt;T&gt;)\n                    {\n                        ((Action&lt;T&gt;) action)(args);\n                    }\n                }\n            }\n        }\n    }</code></pre><p>The generic Raise&lt;T&gt; method in the DomainEvent static class iterates through all the handler using the resolved types from the IoC container.  The DomainEvent has to be bootstrapped on application startup taking in an instance of the IoC container or resolver. In the case of this application, takes an instance of ServiceProvider built from type registration on the instance of ServiceCollection. Don't pay attention to the ServiceProvider and ServiceCollection as they specific to .Net Core and you can choose to use any IoC container of your choice.</p><!--kg-card-begin: html--><p class=\"space\"></p><!--kg-card-end: html--><!--kg-card-begin: markdown--><h2 id=\"theeventhandlers\">The Event Handlers</h2>\n<!--kg-card-end: markdown--><p>The EventHandlers go into a separate project that mimics the Onion architecture. According to the onion architecture, the handlers fits into the Infrastructure layer as they most likely will interact with other services and data stores or carry out some infrastructure related tasks. You get the gist.</p><blockquote>OrderCompleteHandler.cs</blockquote><pre><code class=\"language-csharp\">    public class OrderCompleteHandler : IDomainHandler&lt;OrderCompletedEvent&gt;\n    {\n        public void Hanle(OrderCompletedEvent @event)\n        {\n            @event.Order.NumberOfItems = 100;\n            Console.WriteLine($\"Order Information: \\n=======================\" +\n                              $\"\\nOrder completed on {@event.OrderCreatedDate.ToShortDateString()} \" +\n                              $\"at {@event.OrderCreatedDate:HH:mm:ss tt}\\nID: {@event.Order.OrderId}\" +\n                              $\"\\nNumber of order items: {@event.Order.NumberOfItems}\" +\n                              $\"\\n____________________________________\");\n        }\n    }</code></pre><p>The event handler in this case, <em>OrderCompleteHandler </em>knows to listens for and knows how to handle <em>OrderCompletedEvent </em>we talked about earlier above. All handlers implement a generic IDomainHandler&lt;T&gt; which describes the general signature of an event handler. It will make more sense when we talk about gluing the whole pieces together  next.</p><pre><code class=\"language-csharp\">    public interface IDomainHandler&lt;T&gt; where T : IDomainEvent\n    {\n        void Hanle(T @event);\n    }</code></pre><!--kg-card-begin: html--><p class=\"space\"></p><!--kg-card-end: html--><!--kg-card-begin: markdown--><h2 id=\"puttingitalltogether\">Putting it all together</h2>\n<!--kg-card-end: markdown--><p>Rather than registering each handler or subscriber  on demand as they are created, an IoC container best suit this scenario by registering all types that implements IDomainHandler&lt;T&gt;. For this purpose, S<a href=\"https://github.com/khellang/Scrutor\">crutor</a> has been used. Scrutor can tie itself into the .Net Core IoC container which provides extensibility to register decorators currently not possible with the in-built .Net Core IoC.</p><p>Since a .Net Core console application is used as our client, the bootstrap and type registration is setup in the main method of the console app's Program.cs class.</p><pre><code class=\"language-csharp\">    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Set up the DI\n            //Scan the assembly and register types that implements IDomainHandler interface with .Net Core IoC\n            var serviceProvider = new ServiceCollection()\n                .Scan( scan =&gt; scan\n                    .FromAssemblyOf&lt;StudentRegisteredHandler&gt;()\n                    .AddClasses(classes =&gt; \n                        classes.AssignableTo(typeof(IDomainHandler&lt;&gt;)))\n                    .AsImplementedInterfaces()\n                ).BuildServiceProvider();\n\n            DomainEvent._serviceProvider = serviceProvider;\n            \n            //Create an order\n            \n            var newOrder = new Order(5, \"Amazon\");\n            //Raise an order completed event\n            newOrder.OrderComplete();\n            \n            \n            var studentReg = new Student(Title.Mr, \"John\", \"Murphy\");\n            studentReg.RegisterStudent();\n            \n            var emailSent = \n                new Email(\"recipient@contact.com\", \n                    \"sender@contact.com\", \"Event Message Subject\", \n                    \"This is a short email to say thank you!\");\n            emailSent.RaiseEmailSent();\n\n            Console.ReadKey();\n        }\n    }</code></pre><p>Scrutor provides an extension method, <em>Scan</em> on the IServiceCollection interface. using Scrutor, the assembly of type that implements IDomainHandler&lt;T&gt;  are scanned and registered with the .Net Core IoC container which becomes automatically available to the DomainEvent static class which its Raise&lt;T&gt; method uses to locate the proper handler for a particular event.</p><p>This post mainly focused on one example of raising an event from a Domain object using a DomainEvent static class which its Raise method taps into an IoC container to locate the handler. The output below shows three samples of events that are raised and handled. Check out the source code for reference.</p><pre><code class=\"language-xml\">Order Information: \n=======================\nOrder completed on 09/14/2019 at 17:04:30 PM\nID: 07fa61ed-d5b4-4ed4-9ee1-30e4971972e8\nNumber of order items: 100\n____________________________________\nMr. John Murphy registration is now complete\n_____________________________\n\nEmail to the address recipient@contact.com has been sent!\n_________________________\n</code></pre><!--kg-card-begin: html--><p class=\"space\"></p><!--kg-card-end: html--><!--kg-card-begin: markdown--><h2 id=\"relationshiptootherpatterns\">Relationship to other patterns</h2>\n<!--kg-card-end: markdown--><ul><li><strong>Event Driven Architecture</strong>: Event driven architecture provides higher decoupling of your system</li><li><strong>CQRS: </strong>Command Query Responsibility Segregation (CQRS) uses eventing to boost decoupling  as well and its a very popular pattern. A very good implementation of the CQRS is the .net MediatR library.</li></ul><p>Hopefully, you have learned something today.</p><p>Happy coding..</p>","comment_id":"5d7cd3104a4365250e0c0aa5","feature_image":"http://localhost:2368/content/images/2020/08/domain-event-dispatcher.png","featured":true,"visibility":"public","send_email_when_published":false,"created_at":"2019-09-14T12:46:24.000+01:00","updated_at":"2020-08-27T04:54:15.000+01:00","published_at":"2019-09-14T18:12:38.000+01:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"url":"http://localhost:2368/untitled-2/","excerpt":"Domain Event pattern with in-built .Net Core IoC Container, scrutor and .Net\nCore console application. Source code for this post can be found here\n[https://github.com/mcvavy/DomainEvent]\n\nThis post focuses on the abstract of Domain Event in Domain Driven Design (DDD)\nwhich is also a fundamental building block of microservices or eventing system.\n\n\n\n> An event is something that has happened in the past. A domain event is,\nsomething that happened in the domain that you want other parts of the same","reading_time":5,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null},{"id":"5f37e7a7d486c307401b3eec","uuid":"df2870f6-6e4f-4a6d-8c0a-0f6d8bdeb1a3","title":"My journey into SpringBoot with Kotlin","slug":"my-journey-into-springboot-with-kotlin","html":"<p>I have been an adept C# .Net-ter and always will be. One of my favourites is still C# .NET Core as I do C# almost on a daily basis, but a side of me wanted to be platform and framework agnostics as much as I can. I have been taking advantage of tradeoffs in the different languages/framework in developing micro-services. Some argue that you've got to master one language really well and then one framework really well. I say, You can master them all, be proficient and be able to develop production ready applications. In my case, I currently do .Net Core (MVC/Web API), Spring Boot (Java, Kotlin <em>(preferred)</em>), Python (Django, Flask<em>(preferred)</em>), JavaScript/TypeScript is also worth mentioning, but that's another topic for another day. In a future post, I shall detail a small project using all these technology and framework in a  architecture of micro-services . As I sink my feet more into the world of micro-services, and the plethora of technologies that can come together and function as a big ol system, it is a fascinating and yet intriguing experience. Having had a strong Java programming experience under my belt, I was able to get started quickly with Kotlin and the transition is almost none existent. I'd say flawless. I have been using Kotlin in production at work and it's a pure joy to work with in comparison to Java. An analogy to explain Kotlin vs Java would be taking the elevator or using the stairs to get to the 100th floor of a building, and Kotlin is the elevator. One catch is that Kotlin compiles to Java in the background. More also, Kotlin and Java can interop really well. You can extend your existing Java codes with Kotlin or mix-match them.</p><p><br>With the knowledge of Java, I do catch myself inspecting the compiled Java code to see the nitty-gritty of what's happening under the hood when I come across some not so understandable Kotlin syntax. No matter how Kotlin syntax looks on IntelliJ Idea, my god, it's still beautiful wow!</p><p><br>Let's say we want to create an InvoiceModel class that represents an invoice for a nursery. The properties of the class should allow for change or update. Let's see this in Java and Kotlin.</p><pre><code class=\"language-Java\">    //InvoiceModel.java\n   \n    public class InvoiceModel {\n        private String fullName;\n        private String invoicedate;\n        private String term;\n        private List&lt;InvoiceData&gt; invoiceDatas;\n        private Integer breakfasttotal;\n        private Integer lunchtotal;\n        private Integer afterSchooltotal;\n        private double breakfastamount;\n        private double lunchamount;\n        private double afterschoolamount;\n        private double totaldue;\n        private double breakfastprice;\n        private double lunchprice;\n        private double afterschoolprice;\n\n        public InvoiceModel(String fullName, String invoicedate, String term, List&lt;InvoiceData&gt; invoiceDatas,\n                Integer breakfasttotal, Integer lunchtotal, Integer afterSchooltotal, double breakfastamount,\n                double lunchamount, double afterschoolamount, double totaldue, double breakfastprice, double lunchprice,\n                double afterschoolprice) {\n            super();\n            this.fullName = fullName;\n            this.invoicedate = invoicedate;\n            this.term = term;\n            this.invoiceDatas = invoiceDatas;\n            this.breakfasttotal = breakfasttotal;\n            this.lunchtotal = lunchtotal;\n            this.afterSchooltotal = afterSchooltotal;\n            this.breakfastamount = breakfastamount;\n            this.lunchamount = lunchamount;\n            this.afterschoolamount = afterschoolamount;\n            this.totaldue = totaldue;\n            this.breakfastprice = breakfastprice;\n            this.lunchprice = lunchprice;\n            this.afterschoolprice = afterschoolprice;\n        }\n\n        public String getFullName() {\n            return fullName;\n        }\n\n        public void setFullName(String fullName) {\n            this.fullName = fullName;\n        }\n\n        public String getInvoicedate() {\n            return invoicedate;\n        }\n\n        public void setInvoicedate(String invoicedate) {\n            this.invoicedate = invoicedate;\n        }\n\n        public String getTerm() {\n            return term;\n        }\n\n        public void setTerm(String term) {\n            this.term = term;\n        }\n\n        public List&lt;InvoiceData&gt; getInvoiceDatas() {\n            return invoiceDatas;\n        }\n\n        public void setInvoiceDatas(List&lt;InvoiceData&gt; invoiceDatas) {\n            this.invoiceDatas = invoiceDatas;\n        }\n\n        public Integer getBreakfasttotal() {\n            return breakfasttotal;\n        }\n\n        public void setBreakfasttotal(Integer breakfasttotal) {\n            this.breakfasttotal = breakfasttotal;\n        }\n\n        public Integer getLunchtotal() {\n            return lunchtotal;\n        }\n\n        public void setLunchtotal(Integer lunchtotal) {\n            this.lunchtotal = lunchtotal;\n        }\n\n        public Integer getAfterSchooltotal() {\n            return afterSchooltotal;\n        }\n\n        public void setAfterSchooltotal(Integer afterSchooltotal) {\n            this.afterSchooltotal = afterSchooltotal;\n        }\n\n        public double getBreakfastamount() {\n            return breakfastamount;\n        }\n\n        public void setBreakfastamount(double breakfastamount) {\n            this.breakfastamount = breakfastamount;\n        }\n\n        public double getLunchamount() {\n            return lunchamount;\n        }\n\n        public void setLunchamount(double lunchamount) {\n            this.lunchamount = lunchamount;\n        }\n\n        public double getAfterschoolamount() {\n            return afterschoolamount;\n        }\n\n        public void setAfterschoolamount(double afterschoolamount) {\n            this.afterschoolamount = afterschoolamount;\n        }\n\n        public double getTotaldue() {\n            return totaldue;\n        }\n\n        public void setTotaldue(double totaldue) {\n            this.totaldue = totaldue;\n        }\n\n        public double getBreakfastprice() {\n            return breakfastprice;\n        }\n\n        public void setBreakfastprice(double breakfastprice) {\n            this.breakfastprice = breakfastprice;\n        }\n\n        public double getLunchprice() {\n            return lunchprice;\n        }\n\n        public void setLunchprice(double lunchprice) {\n            this.lunchprice = lunchprice;\n        }\n\n        public double getAfterschoolprice() {\n            return afterschoolprice;\n        }\n\n        public void setAfterschoolprice(double afterschoolprice) {\n            this.afterschoolprice = afterschoolprice;\n        }\n    }\n</code></pre><p>\t\t</p><p>Now <em>Kotlin\t\t</em></p><pre><code class=\"language-Java\">    // InvoiceModel.kt\n    data class InvoiceModel(\n        var fullName: String, \n        var invoicedate: String, \n        var term: String,\n        var invoiceDatas: List&lt;InvoiceData&gt;,\n        var breakfasttotal: Int,\n        var lunchtotal: Int,\n        var afterSchooltotal: Int,\n        var breakfastamount: Double,\n        var lunchamount: Double,\n        var afterschoolamount: Double,\n        var totaldue: Double,\n        var breakfastprice: Double,\n        var lunchprice: Double,\n        var afterschoolprice: Double\n    )</code></pre><p>Just look at the beauty. Now compare the Java's 151 lines of code to Kotlin's 17 lines. Wow! Simply beautiful isn't it?</p><!--kg-card-begin: html--><img class=\"rounded mx-auto d-block\" src=\"https://media2.giphy.com/media/NiOPyn6a7tV3q/giphy.gif?cid=790b76115d1ee35a73434b33592fadde&amp;rid=giphy.gif\" alt=\"queue reaction s GIF\" style=\"width: 480px; height: 270.4px; margin: auto;\"><!--kg-card-end: html--><!--kg-card-begin: html--><p class=\"space\"></p><!--kg-card-end: html--><!--kg-card-begin: html--><p class=\"post-sub-title\">Convention over Configuration</p><!--kg-card-end: html--><p>Spring Boot abstracts all of the configuration you would have to do with the Spring framework. But if you would like to control or extend the default configurations, Spring Boot provides <em><strong>application.properties</strong></em> for this purpose. </p><!--kg-card-begin: html--><p class=\"post-sub-title\">Dependency Injection</p><!--kg-card-end: html--><p>Right out of the box, you get dependency injection for free with Spring Boot. The framework does this uplifting for you and you just worry about writing codes rather than registering your types explicitly like in .NET Core. Oh boy they got this right with Spring Boot.</p><!--kg-card-begin: html--><p class=\"post-sub-title\">Modular Boilerplate Code</p><!--kg-card-end: html--><!--kg-card-begin: markdown--><p>You can generate your Spring Boot boiler code at <a href=\"http://start.spring.io\">http://start.spring.io</a> to build the tempplate for your project and you can make it as modular as you want. They include but not limited to:</p>\n<ul>\n<li>Spring Data</li>\n<li>Spring Security</li>\n<li>Spring MVC and much more...</li>\n</ul>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><p class=\"post-sub-title\">Conclusion</p><!--kg-card-end: html--><p>Getting started with the Spring framework using Spring Boot is very interesting if you already know Java as the framework is Java based, but came along Kotlin which makes it super fun to work with. You should easily get started with Kotlin if you are already comfortable with Java. You can learn Kotlin from scratch, but you will be better off knowing some Java at least the basics as most of the library and import you will be doing in Kotlin, are Java libraries. If  you want to get started with developing Java based enterprise application, the Spring framework via Spring Boot is matured to take you there and Kotlin over Java should be your choice. Future post will talk about how to get started with Spring Boot using Kotlin.  Happy Coding!</p>","comment_id":"5d1e40aca38224549403f874","feature_image":"http://localhost:2368/content/images/2020/08/kotlinspring.png","featured":true,"visibility":"public","send_email_when_published":false,"created_at":"2019-07-04T19:08:44.000+01:00","updated_at":"2020-08-15T15:49:07.000+01:00","published_at":"2019-07-07T15:18:16.000+01:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"url":"http://localhost:2368/my-journey-into-springboot-with-kotlin/","excerpt":"I have been an adept C# .Net-ter and always will be. One of my favourites is\nstill C# .NET Core as I do C# almost on a daily basis, but a side of me wanted\nto be platform and framework agnostics as much as I can. I have been taking\nadvantage of tradeoffs in the different languages/framework in developing\nmicro-services. Some argue that you've got to master one language really well\nand then one framework really well. I say, You can master them all, be\nproficient and be able to develop production ","reading_time":4,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null},{"id":"5f37e7a7d486c307401b3eeb","uuid":"ff7bba55-f89a-44c6-a37b-48b4364f66ce","title":"Call, Apply & Bind","slug":"untitled-call-apply","html":"<p>In this blog post, I will quickly discuss the <strong>call()</strong>, <strong>apply()</strong> &amp; <strong>bind()</strong> methods. These methods allows for dynamic change in the JavaScript \"<em>this</em>\". The <em>this </em>can be changed depending on the context being used. The usefulness of these methods comes when you want to do some method or function borrowing. Without further due, let's master this methods with examples.</p><blockquote>The call(), apply(), and bind() method all do the same thing with some slight variation.</blockquote><p><em>Method borrowing</em> in JavaScript is the concept of reusing an exiting method within the context of different object or reuse method outside the context with which it was created.</p><blockquote>Say object A has a method <em>f, object </em>B should be able to use method <em>f </em>of A if the same property(ies) are present in both object.</blockquote><p>Let's illustrate this concept in code. </p><p>Let's say objects A and B</p><pre><code class=\"language-javascript\">    //object A\n    let A = {\n        name: \"Michael\",\n        lastName: \"Programmer\",\n        getFullName(){\n            console.log(`The full name is ${this.name} ${this.lastName}`)\n        }\n    }</code></pre><pre><code class=\"language-javascript\">    //object B\n    let B = {\n        name: \"Another\",\n        lastName: \"Michael\"\n    }</code></pre><!--kg-card-begin: markdown--><h2 id=\"borrowing\">Borrowing</h2>\n<p>Now let's borrow the getFullName method of object A to output to the console details of object B</p>\n<!--kg-card-end: markdown--><h5 id=\"call-method\"><em>Call() method</em></h5><blockquote>call(thisArg: any, arg1, arg2...argn)</blockquote><p>The call method accepts an argument list separated by commas. The first argument references the <em>this</em> keyword, which is the object you are trying to switch context to. In the example below, object B is <em>this</em></p><pre><code class=\"language-javascript\">A.getFullName.call(B); // The full name is Another Michael</code></pre><p>Boom! that simple.</p><p>We could also rip out the method from the object A and have object A and object B borrow and use the function.</p><pre><code class=\"language-javascript\">    let namePrinter = function(){\n        console.log(`The full name is ${this.name} ${this.lastName}`);\n    };\n\n\t//object A\n    let A = {\n        name: \"Michael\",\n        lastName: \"Programmer\"\n    }\n    \n    //object B\n    let B = {\n        name: \"Another\",\n        lastName: \"Michael\"\n    };\n    \n    namePrinter.call(A); //The full name is Michael Programmer\n    namePrinter.call(B); //The full name is Another Michael</code></pre><p></p><p><em>Passing argument</em></p><p>In case you are wondering, we can also pass arguments let see this with an example. Suppose the namePrinter function also accepts and output a country. You can pass in the argument after referencing <em>this. </em>Let's create another function accepting an argument and let's borrow it. Let's also add objects C and D.</p><pre><code class=\"language-javascript\">    let namePrinterWithHomeTown = function (hometown) {\n      console.log(`${this.name} ${this.lastName} is from ${hometown}`);\n    }\n    \n    //object C\n    let C = {\n      name: \"Jack\",\n      lastName: \"Black\"\n    };\n\n    //object D\n    let D = {\n      name: \"Alaka\",\n      lastName: \"Kamba\"\n    };\n\n    namePrinterWithHomeTown.call(A, \"Serbia\") // Michael Programmer is from Serbia</code></pre><p></p><h5 id=\"apply-method\"><em>Apply() method</em></h5><blockquote>apply(thisArg: [args])</blockquote><p>The apply method works the exact same way as the call method but it accepts an array of argument after referencing <em>this.</em></p><pre><code class=\"language-javascript\">    namePrinter.apply(C) //The first name is Jack, last name is Black</code></pre><p><em>Passing arguments</em></p><pre><code class=\"language-javascript\">    namePrinterWithHomeTown.apply(C, [\"Madagascar\"]) //Jack Black is from Madagascar</code></pre><h5 id=\"bind-method\"><em>Bind() method</em></h5><blockquote>bind(thisArg, Args)</blockquote><p>Bind behaves very similar to apply and call method with the only difference being bind is deferred which means it has to be manually invoked because it's not invoked automatically like <em>call </em> and <em>apply</em>. Let see this in code.</p><pre><code class=\"language-javascript\">    let objD = namePrinter.bind(D); \n    objD(); // The first name is Alaka, last name is Kamba</code></pre><p><em>Passing argument</em></p><pre><code class=\"language-javascript\">    let nameCountry = namePrinterWithHomeTown.bind(C, \"Peru\");\n    nameCountry(); // Jack Black is from Peru</code></pre><p>A great benefit of these methods is <strong><em>reusability</em></strong>. If you have multiple object having same or very similar shape, and you want to carry out a common operation across these objects, you can function borrow if you are not using prototypical inheritance.</p><p>Throughout the javascript ecosystem, the <em>call, bind, &amp; apply </em>method can be used with almost anything in terms or attaching and switching contexts. Below is a playground to play around with these methods. Open up the console at the bottom right to see results. </p><p>I will explore some advance application of these methods in another post which will go in-depth to explain some powerful concepts.</p><p>Happy Coding!</p><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://stackblitz.com/edit/bind-call-apply?embed=1&amp;file=index.js\" height=\"400\" width=\"745\"></iframe></figure>","comment_id":"5d1b8ebaa38224549403f719","feature_image":"http://localhost:2368/content/images/2020/08/call-apply-bind.jpg","featured":true,"visibility":"public","send_email_when_published":false,"created_at":"2019-07-02T18:04:58.000+01:00","updated_at":"2020-08-17T21:00:00.000+01:00","published_at":"2019-07-02T23:06:01.000+01:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"url":"http://localhost:2368/untitled-call-apply/","excerpt":"In this blog post, I will quickly discuss the call(), apply() & bind() methods.\nThese methods allows for dynamic change in the JavaScript \"this\". The this can\nbe changed depending on the context being used. The usefulness of these methods\ncomes when you want to do some method or function borrowing. Without further\ndue, let's master this methods with examples.\n\n> The call(), apply(), and bind() method all do the same thing with some slight\nvariation.\nMethod borrowing in JavaScript is the concept ","reading_time":3,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null},{"id":"5f37e7a7d486c307401b3ee8","uuid":"c95f134d-97ed-4ee6-9741-9adcf41cc3c3","title":"JavaScript OOP : Polymorphism","slug":"pillars-of-object-oriented-programming-polymorphism","html":"<!--kg-card-begin: markdown--><p>This post is part of a series of posts on JavaScript object-oriented programming. Link to the series are as follows:</p>\n<p>This series is as follows:</p>\n<ol>\n<li><a href=\"http://localhost:2368/pillars-of-objected-oriented-programming\">Pillars of Objected-Oriented Programming</a></li>\n<li><a href=\"http://localhost:2368/javascript-objects-prototype-constructor/\">JavaScript Objects, prototype, constructor, &amp; Object constructor</a></li>\n<li><a href=\"http://localhost:2368/object-creation-in-javascript/\">Object Creation in JavaScript</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-abstraction-2/\">JavaScript OOP : Abstraction</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-encapsulation/\">JavaScript OOP : Encapsulation</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-inheritance\">JavaScript OOP : Inheritance</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-polymorphism\">JavaScript OOP : Polymorphism</a></li>\n<li><a http://localhost:2368/pillars-of-object-oriented-programming-polymorphism/href=\"\">JavaScript OOP : Inheritance vs Composition</a></li>\n</ol>\n<p class=\"space\"></p>\n<p>This post is a continuation of the object-oriented programming in JavaScript where we discuss polymorphism.</p>\n<h3 id=\"whatispolymorphism\">What is polymorphism ?</h3>\n<p><mark><strong>Polymorphism in the ability to exist and appear in many forms</strong></mark>.</p>\n<ul>\n<li><em><mark>Derived objects or subclass may be treated as objects of a base class such as collections of arrays</mark></em></li>\n<li><em><mark>Derived objects can override methods of a base object by providing their own implementations</mark></em></li>\n</ul>\n<p>Let's explain this concepts in JavaScript while building upon the Shape object and its derived objects from the <a href=\"http://localhost:2368/pillars-of-object-oriented-programming-inheritance\">inheritance</a> post.</p>\n<blockquote>\n<p><em><p class=\"strong-point-highlight\">A Child object or subclass or derived object may be treated as a parent objects of a base class</p></em></p>\n</blockquote>\n<p>Let's borrow some code from the <a href=\"http://localhost:2368/pillars-of-object-oriented-programming-inheritance\">inheritance</a> post.</p>\n<pre><code>\n    function Shape(color, name){\n        this.color = color;\n        this.name = name;\n    }\n\n    Shape.prototype.draw = function(){\n      console.log(`${this.name} with color ${this.color} is drawn!`);\n    };\n\n\n    //Circle Shape\n    function Circle(radius, name, color){\n        //Calling the base or parent class\n        Shape.call(this, color, name);\n        this.radius = radius;\n      }\n\n      //Circle inherit from Shape\n      inherit(Shape, Circle);\n\n\n    //Triangle Shape\n    function Triangle(base, height, name, color){\n        Shape.call(this, color, name);\n        this.radius = radius;\n      }\n\n      //Triangle inherit from Shape\n      inherit(Shape, Triangle);\n\n\n      //Rectangle Shape\n    function Rectangle(length, breath, name, color){\n        Shape.call(this, color, name);\n        this.radius = radius;\n      }\n\n      //Rectangle inherit from Shape\n      inherit(Shape, Rectangle);\n\n\n    function inherit(Parent, Child){\n        Child.prototype = Object.create(Parent.prototype);\n        Child.prototype.constructor = Child;\n    }\n</code></pre> \n<p>Treating all kinds of shape as a Shape object yet still able to behave in the form of the different shapes.</p>\n<pre><code>\n    const shapes = [\n        new Circle(10, 'Circle', 'red'),\n        new Triangle(5, 10, 'triangle', 'black'),\n        new Rectangle(10, 10, 'rectangle', 'blue')\n    ]\n\n    shapes.forEach(shape => shape.draw());\n\n    //Circle with color red is drawn!\n    //triangle with color black is drawn!\n    //rectangle with color blue is drawn!\n</code></pre>  \n<p>All the shapes object are now treated like a single Shape object while they behave differently.</p>\n<p class=\"space\"></p>  \n<p class=\"space\"></p>  \n<p><em><p class=\"strong-point-highlight\">Derived objects can override methods of a base object by providing their own implementations</p></em></p>\n<p>This concept of having a child object overridding the parent's method is referred to as <mark><strong>method overriding</strong></mark>. Let's now implement method override for each of the child object of the Shape object by providing different implementation of the <mark><strong>draw()</strong></mark> method on each child object except the Circle object.</p>\n<pre><code>\n    function Shape(color, name){\n        this.color = color;\n        this.name = name;\n    }\n\n    Shape.prototype.draw = function(){\n      console.log(`${this.name} with color ${this.color} is drawn!`);\n    };\n\n\n    //Circle Shape\n    function Circle(radius, name, color){\n        Shape.call(this, color, name); //Calling the base or parent class\n        this.radius = radius;\n      }\n\n      //Circle inherit from Shape\n      inherit(Shape, Circle);\n\n\n    //Triangle Shape\n    function Triangle(base, height, name, color){\n        Shape.call(this, color, name);\n        this.base = base;\n        this.height = height;\n      }\n\n      //Triangle inherit from Shape\n      inherit(Shape, Triangle);\n\n      Triangle.prototype.draw = function(){\n        console.log(`From Triangle override: ${this.name} with color ${this.color} is drawn!`);\n      }\n\n\n      //Rectangle Shape\n    function Rectangle(length, breath, name, color){\n        Shape.call(this, color, name);\n        this.length = length;\n        this.breath = breath;\n      }\n\n        //Rectangle inherit from Shape\n        inherit(Shape, Rectangle);\n\n      Rectangle.prototype.draw = function(){\n        console.log(`From Rectangle override: ${this.name} with color ${this.color} is drawn!`);\n      }\n\n\n\n\n    function inherit(Parent, Child){\n        Child.prototype = Object.create(Parent.prototype);\n        Child.prototype.constructor = Child;\n    }\n\n    const shapes = [\n        new Circle(10, 'Circle', 'red'),\n        new Triangle(5, 10, 'triangle', 'black'),\n        new Rectangle(10, 10, 'rectangle', 'blue')\n    ]\n\n    shapes.forEach(shape => shape.draw());\n    //Circle with color red is drawn!\n    //From Triangle override: triangle with color black is drawn!\n    //From Rectangle override: rectangle with color blue is drawn!\n</code></pre> \n<p>The Triangle and Rectangle objects now have their own implementation of the draw method which is slightly different from their ancestor's implementation. The way this works in JavaScript is that when a method or property is invoked on an object, the property is first looked up on the object and if not found, its prototype (parent) is checked for the property and if not found, it continues to the next prototype up the chain until it's found and if eventually, it's not found, the JavaScript engine then errors out.</p>\n<p>This concludes the post on polymorphism in JavaScript object oriented programming</p>\n<p>Happy coding...</p>\n<p class=\"space\"></p>  \n<p><strong><strong>Credits:</strong></strong><br>\nImage by LOISLEARNS : <a href=\"https://loislearns.com/2016/08/30/polymorphism/\">https://loislearns.com/2016/08/30/polymorphism/</a></p>\n<!--kg-card-end: markdown-->","comment_id":"5ae56a37d8240f1f647a63ce","feature_image":"https://images.unsplash.com/photo-1562065540-efa93744ed71?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","featured":false,"visibility":"public","send_email_when_published":false,"created_at":"2018-04-29T07:46:15.000+01:00","updated_at":"2019-07-02T21:21:17.000+01:00","published_at":"2018-07-27T03:29:30.000+01:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"url":"http://localhost:2368/pillars-of-object-oriented-programming-polymorphism/","excerpt":"This post is part of a series of posts on JavaScript object-oriented\nprogramming. Link to the series are as follows:\n\nThis series is as follows:\n\n 1. Pillars of Objected-Oriented Programming\n    [/pillars-of-objected-oriented-programming]\n 2. JavaScript Objects, prototype, constructor, & Object constructor\n    [/javascript-objects-prototype-constructor/]\n 3. Object Creation in JavaScript [/object-creation-in-javascript/]\n 4. JavaScript OOP : Abstraction\n    [/pillars-of-object-oriented-programmi","reading_time":3,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null},{"id":"5f37e7a7d486c307401b3ee6","uuid":"3019c00d-1718-4e09-8c4c-939ae3881627","title":"JavaScript OOP : Inheritance","slug":"pillars-of-object-oriented-programming-inheritance","html":"<!--kg-card-begin: markdown--><p>This post is part of a series of posts on JavaScript object-oriented programming. Link to the series are as follows:</p>\n<p>This series is as follows:</p>\n<ol>\n<li><a href=\"http://localhost:2368/pillars-of-objected-oriented-programming\">Pillars of Objected-Oriented Programming</a></li>\n<li><a href=\"http://localhost:2368/javascript-objects-prototype-constructor/\">JavaScript Objects, prototype, constructor, &amp; Object constructor</a></li>\n<li><a href=\"http://localhost:2368/object-creation-in-javascript/\">Object Creation in JavaScript</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-abstraction-2/\">JavaScript OOP : Abstraction</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-encapsulation/\">JavaScript OOP : Encapsulation</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-inheritance\">JavaScript OOP : Inheritance</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-polymorphism\">JavaScript OOP : Polymorphism</a></li>\n<li><a http://localhost:2368/pillars-of-object-oriented-programming-inheritance/href=\"\">JavaScript OOP : Inheritance vs Composition</a></li>\n</ol>\n<p class=\"space\"></p>\n<p>If you are still following this series, then you are doing really fine. Today we will continue this series with <strong>inheritance</strong>.</p>\n<p>JavaScript doesn't have the concept of classes like in other programming languages like C# or Java. While ES6 introduces the concept of classes, it's just a wrapper around object. <em><strong>Everything in JavaScript is object</strong></em> We will further explain what that means when we talk about ES6 classes.</p>\n<p>If you remember, we talked about prototype in our <a href=\"http://localhost:2368/javascript-objects-prototype-constructor/\">previous post</a> Prototype holds the key to truly understand object-oriented programming in JavaScript. <em><strong>Prototype in JavaScript is simply, parent of another object</strong></em>. So when I use the word prototype, I am referring to the parent of an object <em>e.g If object B inherits from object A, then B's prototype is A</em>.</p>\n<h1 id=\"prototypicalinheritance\">Prototypical Inheritance</h1>\n<blockquote>\n<p><mark><strong>Inheritance is the ability of an object to take on the property and method of another object</strong></mark>. Meaning if object B inherits from object A, then object B should have all the properties and behaviours of object A.</p>\n</blockquote>\n<p>To help solidify JavaScript OOP, we will use the analogy of shapes like Square, Circle, Triangle to illustrate this concept. Suppose we are tasked to implement a solution to store and keep tracks of different shapes, how would we go about designing our system conforming to OOP?</p>\n<p>Our focus is on <strong>inheritance</strong> right now. Let's design out shape application. A shape object with a basic property or method that knows how to draw shapes.</p>\n<pre><code>\n    function Shape(){\n    }\n\n    Shape.prototype.draw = function(){\n      console.log(\"This shape is drawn\");\n    };\n</code></pre>\n<p>Now we have a base object (Shape) which will serve as a prototype (or parent) to other types of shapes we will implement.  Let's create a circle shape that inherits from our base Shape object.</p>\n<pre><code>\n    function Circle(radius){\n      this.radius = radius;\n    }\n\n    //Circle inherits from Shape object\n    Circle.prototype = Object.create(Shape.prototype);\n\n    //Setting the constructor to Circle object\n    //to allow for creation of new Circle Object\n    Circle.prototype.constructor = Circle;\n</code></pre>\n<p>The parent object (Shape) has a property draw  which is inherited by the the child object (Circle).</p>\n<p><img src=\"http://localhost:2368/content/images/2018/07/childfunc.png?w=600&amp;q=80&amp;style=center\" alt=\"childfunc\"></p>\n<p>Now let's give each shape object color and names without repeating codes. We will further add other shapes such as triangle and rectangle. The list can go on and on for all possible shapes. However, we will stick to few shapes.</p>\n<pre><code>\n    function Shape(color, name){\n        this.color = color;\n        this.name = name;\n    }\n\n    Shape.prototype.draw = function(){\n      console.log(`${this.name} with color ${this.color} is drawn!`);\n    };\n\n\n    //Circle Shape\n    function Circle(radius, name, color){\n        Shape.call(this, color, name); //Calling the base or parent class\n        this.radius = radius;\n      }\n\n      //Circle inherit from Shape\n      inherit(Shape, Circle);\n\n\n    //Triangle Shape\n    function Triangle(base, height, name, color){\n        Shape.call(this, color, name);\n        this.base = base;\n        this.height = height;\n      }\n\n      //Triangle inherit from Shape\n      inherit(Shape, Triangle);\n\n\n      //Rectangle Shape\n    function Rectangle(length, breath, name, color){\n        Shape.call(this, color, name);\n        this.length = length;\n        this.breath = breath;\n      }\n\n      //Rectangle inherit from Shape\n      inherit(Shape, Rectangle);\n\n\n    function inherit(Parent, Child){\n        Child.prototype = Object.create(Parent.prototype);\n        Child.prototype.constructor = Child;\n    }\n</code></pre>  \n<p>Now we have different shapes implementing or inheriting from the Shape object. Let's have a quick look how the children object behave. I have encapsulated the two lines of code of changing the prototypes into a re-usable function inherit to make our code easy to read.</p>\n<pre><code>\n    let circle = new Circle(10, 'Circle', 'red'),\n        triangle = new Triangle(5, 10, 'triangle', 'black'),\n        rectangle = new Rectangle(10, 10, 'rectangle', 'blue');\n</code></pre>\n<p><img src=\"http://localhost:2368/content/images/2018/07/output.png?w=600&amp;q=80&amp;style=center\" alt=\"output\"></p>\n<p>In addition to their proprties, all the children objects now have access to the parent(prototype) object property.</p>\n<p>This completes the basis of inheritance in object-oriented JavaScript.</p>\n<p>Happy Coding...</p>\n<!--kg-card-end: markdown-->","comment_id":"5ae56a1ed8240f1f647a63ca","feature_image":"https://images.unsplash.com/photo-1439920120577-eb3a83c16dd7?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ&s=1aaafd4c76b2ea3d4f8cbd3d860af489","featured":false,"visibility":"public","send_email_when_published":false,"created_at":"2018-04-29T07:45:50.000+01:00","updated_at":"2019-07-07T20:30:42.000+01:00","published_at":"2018-07-23T11:47:51.000+01:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"url":"http://localhost:2368/pillars-of-object-oriented-programming-inheritance/","excerpt":"This post is part of a series of posts on JavaScript object-oriented\nprogramming. Link to the series are as follows:\n\nThis series is as follows:\n\n 1. Pillars of Objected-Oriented Programming\n    [/pillars-of-objected-oriented-programming]\n 2. JavaScript Objects, prototype, constructor, & Object constructor\n    [/javascript-objects-prototype-constructor/]\n 3. Object Creation in JavaScript [/object-creation-in-javascript/]\n 4. JavaScript OOP : Abstraction\n    [/pillars-of-object-oriented-programmi","reading_time":3,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null},{"id":"5f37e7a7d486c307401b3ee5","uuid":"60499792-79c8-42c1-bfed-5b1474ab165a","title":"JavaScript OOP : Encapsulation","slug":"pillars-of-object-oriented-programming-encapsulation","html":"<!--kg-card-begin: markdown--><p>This post is part of a series of posts on JavaScript object-oriented programming. Link to the series are as follows:</p>\n<p>This series is as follows:</p>\n<ol>\n<li><a href=\"http://localhost:2368/pillars-of-objected-oriented-programming\">Pillars of Objected-Oriented Programming</a></li>\n<li><a href=\"http://localhost:2368/javascript-objects-prototype-constructor/\">JavaScript Objects, prototype, constructor, &amp; Object constructor</a></li>\n<li><a href=\"http://localhost:2368/object-creation-in-javascript/\">Object Creation in JavaScript</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-abstraction-2/\">JavaScript OOP : Abstraction</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-encapsulation/\">JavaScript OOP : Encapsulation</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-inheritance\">JavaScript OOP : Inheritance</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-polymorphism\">JavaScript OOP : Polymorphism</a></li>\n<li><a http://localhost:2368/pillars-of-object-oriented-programming-encapsulation/href=\"\">JavaScript OOP : Inheritance vs Composition</a></li>\n</ol>\n<p>Let's demystify encapsulation in this episode. As a reminder, <strong>encapsulation</strong> <mark><strong>is all about information hiding.</strong></mark> In a simple sentence, this means we as developers should try by all means to ensure our internal implementation details never leak to the outside or specific property never get accessed from the outside and also not modifiable from the outside if our intention is not to do so.</p>\n<p>By design, JavaScript doesn't have the concept of private access modifiers like in strongly typed languages like C# and Java, but they are ways to ensure a property not intended to be accessed from the outside remains so. We will be looking at ways to ensure encapsulation for our object. We will continue to examine the CassettePlayer object from the last episode:</p>\n<pre><code>\n    function CassettePlayer(cassette){\n      this.cassette = cassette;\n\n      this.play = function(){\n        console.log(`I am playing ${this.cassette}`);\n      };\n      \n      this.pause = function(){\n        //pause cassette\n      }\n\n      this.stop = function(){\n        //stop playing\n      };\n\n      this.record = function(){\n        //record onto a cassette\n      };\n\n      this.forward = function(){\n        //forward cassette\n      };\n\n      this.rewind = function(){\n        //rewind cassette\n      };\n\n      this.eject = function(){\n        //eject cassette\n      };\n    }\n</code></pre>\n<pre><code>\n    let cassetPlayer = new CassettePlayer(\"Hip-hop\");\n    cassetPlayer.play() // I am playing Hip-hop\n</code></pre>\n<p>Visualising the CassettePlayer's property:</p>\n<p><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2Fimage.png?v=1562526047200\" alt=\"abstraction\"></p>\n<p>If you've been following you must have noticed I mentioned there was an issue in the previous post and how we are going to use encapsulation to solve the problem.</p>\n<p>the  <strong>this.cassette</strong> property of the CassettePlayer object is not meant to be accessed or modified from outside. This is dangerous as anyone can cause the state of our object to change intentionally or by accident. It is possible to do something like <strong>cassetPlayer.cassette = &quot;something else&quot;</strong> This should never happen as the CassettePlayer object depends or make use of this property internally.</p>\n<p>Let's see how to resolve the problem encapsulating away internal property: To make them private and not accessible from the outside.</p>\n<p><strong>let &amp; const keywords</strong><br>\nThe let and const are introduced to JavaScript in the ECMAScript 6 or ES6 features. They are block-scoped modifiers, meaning if you declare a variable with the <strong>let</strong> or <strong>const</strong> keyword, that variable will only be accessible within the block it was declared.One fundamental difference between let and const is that once you declare a variable using const, value of that variable cannot be changed. Apply that to our CassettePlayer object we have:</p>\n<pre><code>\n    function CassettePlayer(cassette){\n      const _cassette = cassette;\n\n      this.play = function(){\n        console.log(`I am playing ${this.cassette}`);\n      };\n\n      this.pause = function(){\n        //pause cassette\n      }\n\n      this.stop = function(){\n        //stop playing\n      };\n\n      this.record = function(){\n        //record onto a cassette\n      };\n\n      this.forward = function(){\n        //forward cassette\n      };\n\n      this.rewind = function(){\n        //rewind cassette\n      };\n\n      this.eject = function(){\n        //eject cassette\n      };\n    }\n    \n    let cassettePlayer = new CassettePlayer(\"Hip hop\");\n    cassettePlayer.play();\n\n    console.log(cassettePlayer);\n    \n</code></pre>\n<p><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2FScreenshot%202019-07-07%20at%2020.21.19.png?v=1562527311357\" alt=\"encapsulate\"></p>\n<p>Our internal variable is now concealed and not accessible from the outside. The CassettePlayer object now satisfies abstraction and encapsulation.</p>\n<p><strong>Revealing Module Pattern</strong><br>\nThe Revealing module pattern is a JavaScript design pattern that supports and enforces encapsulation. This pattern helps you decide what you want to expose and not expose. Let have a look:</p>\n<pre><code>\n    function cassettePlayer(cassette){\n\n      var _cassette = cassette;\n\n      function play(){ console.log(`I am playing ${_cassette}`); }\n\n      function pause(){}\n\n      function stop(){}\n\n      function record(){}\n\n      function forward(){}\n\n      function rewind(){}\n\n      function eject(){}\n      function connectToWifi(){} // Not accessible!\n\n      return {\n        play: play,\n        pause: pause,\n        stop: stop,\n        record: record,\n        forward: forward,\n        rewind: rewind,\n        eject: eject\n      };\n    }\n</code></pre>\n<p><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2FScreenshot%202019-07-07%20at%2020.21.19.png?v=1562527311357\" alt=\"revealing-pattern\"></p>\n<p>The connect connectToWifi property is not accessible from the outside even if you try to access it.</p>\n<p>By all means, this is not the exhaustive list of how to create private properties in JavaScript. In other not to get too ahead of ourselves, we'll stick to these for now. If you want to explore further,  have a look at <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">ES6 symbols</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">weakMaps</a>. Symbols and weakMaps can also be used to create private properties. We will be exploring them further in the future post on ES6.</p>\n<p>I hope you have learned something new today.</p>\n<p>Happy coding.</p>\n<!--kg-card-end: markdown-->","comment_id":"5ae56a02d8240f1f647a63c6","feature_image":"https://images.unsplash.com/photo-1511560941362-2e0171b73d6c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ&s=8285be63e15ffbe1c8bf22c33d280438","featured":false,"visibility":"public","send_email_when_published":false,"created_at":"2018-04-29T07:45:22.000+01:00","updated_at":"2019-07-07T20:26:36.000+01:00","published_at":"2018-05-04T04:38:00.000+01:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"url":"http://localhost:2368/pillars-of-object-oriented-programming-encapsulation/","excerpt":"This post is part of a series of posts on JavaScript object-oriented\nprogramming. Link to the series are as follows:\n\nThis series is as follows:\n\n 1. Pillars of Objected-Oriented Programming\n    [/pillars-of-objected-oriented-programming]\n 2. JavaScript Objects, prototype, constructor, & Object constructor\n    [/javascript-objects-prototype-constructor/]\n 3. Object Creation in JavaScript [/object-creation-in-javascript/]\n 4. JavaScript OOP : Abstraction\n    [/pillars-of-object-oriented-programmi","reading_time":3,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null},{"id":"5f37e7a7d486c307401b3ee9","uuid":"6a09cb23-8d89-4486-9022-78c58501ac70","title":"JavaScript OOP : Abstraction","slug":"pillars-of-object-oriented-programming-abstraction-2","html":"<!--kg-card-begin: markdown--><p>This post is part of a series of posts on JavaScript object-oriented programming. Link to the series are as follows:</p>\n<p>This series is as follows:</p>\n<ol>\n<li><a href=\"http://localhost:2368/pillars-of-objected-oriented-programming\">Pillars of Objected-Oriented Programming</a></li>\n<li><a href=\"http://localhost:2368/javascript-objects-prototype-constructor/\">JavaScript Objects, prototype, constructor, &amp; Object constructor</a></li>\n<li><a href=\"http://localhost:2368/object-creation-in-javascript/\">Object Creation in JavaScript</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-abstraction-2/\">JavaScript OOP : Abstraction</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-encapsulation/\">JavaScript OOP : Encapsulation</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-inheritance\">JavaScript OOP : Inheritance</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-polymorphism\">JavaScript OOP : Polymorphism</a></li>\n<li><a http://localhost:2368/pillars-of-object-oriented-programming-abstraction-2/href=\"\">JavaScript OOP : Inheritance vs Composition</a></li>\n</ol>\n<p>Let's get to the fun part, see how we can implement abstraction in JavaScript. As a reminder, abstraction is the process of hiding away implementation and internal details and present the user with what's needed. We are going to focus on the cassette player we used in the previous post on abstraction. Remember this?</p>\n<p><img src=\"https://images.unsplash.com/photo-1495369470453-f6af4ade471b?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=1b9c2148b9404faac82511c12524ffe7&amp;auto=format&amp;fit=crop&amp;w=600&amp;q=80&amp;style=center\" alt=\"Casset player\"></p>\n<p>Let's now represent our cassette player as an object by abstracting away the internal implementation:</p>\n<pre><code>\n    function CassettePlayer(cassette){\n      this.cassette = cassette;\n\n      this.play = function(){\n        console.log(`I am playing ${this.cassette}`);\n      };\n      \n      this.pause = function(){\n        //pause cassette\n      }\n\n      this.stop = function(){\n        //stop playing\n      };\n\n      this.record = function(){\n        //record onto a cassette\n      };\n\n      this.forward = function(){\n        //forward cassette\n      };\n\n      this.rewind = function(){\n        //rewind cassette\n      };\n\n      this.eject = function(){\n        //eject cassette\n      };\n    }\n</code></pre>\n<p>Now as we have abstracted the CassetPlayer object and do not care about its implementation details. All a user cares about is to play, pause, stop, rewind, forward, record, and eject using the CassettePlayer.</p>\n<p>This is abstraction. Present the user or consumer of an object with only what it needs. Keep it simple. There's a small issue which am going to point out and solve it using <strong>encapsulation</strong>.</p>\n<p>We may now call the CassettePlayer object to play a cassette:</p>\n<pre><code>let cassetPlayer = new CassettePlayer(\"Hip-hop\");\ncassetPlayer.play() // I am playing Hip-hop\n</code></pre>\n<p>Visualising the CassettePlayer's property:</p>\n<p><img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2Fimage.png?v=1562526047200\" alt=\"abstraction\"></p>\n<p>The issue of the CassettePlayer's internal property, <em>cassette</em> leaking to the outside shall be taken care of by implementing <strong>encapsulation</strong> which we'll look at next.</p>\n<p>Happy coding.</p>\n<!--kg-card-end: markdown-->","comment_id":"5ae56a44d8240f1f647a63d0","feature_image":null,"featured":false,"visibility":"public","send_email_when_published":false,"created_at":"2018-04-29T07:46:28.000+01:00","updated_at":"2019-07-07T20:08:39.000+01:00","published_at":"2018-05-03T12:00:00.000+01:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"url":"http://localhost:2368/pillars-of-object-oriented-programming-abstraction-2/","excerpt":"This post is part of a series of posts on JavaScript object-oriented\nprogramming. Link to the series are as follows:\n\nThis series is as follows:\n\n 1. Pillars of Objected-Oriented Programming\n    [/pillars-of-objected-oriented-programming]\n 2. JavaScript Objects, prototype, constructor, & Object constructor\n    [/javascript-objects-prototype-constructor/]\n 3. Object Creation in JavaScript [/object-creation-in-javascript/]\n 4. JavaScript OOP : Abstraction\n    [/pillars-of-object-oriented-programmi","reading_time":1,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null},{"id":"5f37e7a7d486c307401b3ee4","uuid":"a3b3372b-076b-4166-a10c-925d6ec19949","title":"Object Creation in JavaScript","slug":"object-creation-in-javascript","html":"<!--kg-card-begin: markdown--><p>This post is part of a series of posts on JavaScript object-oriented programming. Link to the series are as follows:</p>\n<p>This series is as follows:</p>\n<ol>\n<li><a href=\"http://localhost:2368/pillars-of-objected-oriented-programming\">Pillars of Objected-Oriented Programming</a></li>\n<li><a href=\"http://localhost:2368/javascript-objects-prototype-constructor/\">JavaScript Objects, prototype, constructor, &amp; Object constructor</a></li>\n<li><a href=\"http://localhost:2368/object-creation-in-javascript/\">Object Creation in JavaScript</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-abstraction-2/\">JavaScript OOP : Abstraction</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-encapsulation/\">JavaScript OOP : Encapsulation</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-inheritance\">JavaScript OOP : Inheritance</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-polymorphism\">JavaScript OOP : Polymorphism</a></li>\n<li><a http://localhost:2368/object-creation-in-javascript/href=\"\">JavaScript OOP : Inheritance vs Composition</a></li>\n</ol>\n<p>In the previous part of this series, we went through JavaScript objects and how they work under the hood. As a refresher, JavaScript objects are created at the low-level using <strong>new Object()</strong>. We will go through Object creation in JavaScript, but bare in mind that almost everything in JavaScript revolves around objects, and inherit from Object's prototype.  Now let's examine different way how objects are created in JavaScript. In demonstrating object creation, we will focus on a representing a person.</p>\n<p class=\"space\"></p>\n<h2 id=\"objectconstructornewobject\">Object constructor: <em>new Object()</em>;</h2>\n<p>We've previously gone through creating an object using the Object constructor, but it's worth mentioning again to help solidify the concept.</p>\n<pre><code class=\"js\">\n    var person = new Object();\n    person.id = 123;\n    person.firstname = \"John\";\n    person.lastname = \"Fischer\"\n    person.age = 24;\n    person.showMove = function(){\n        console.log(\"I can do a split!\");\n    };\n</code></pre>\n<p class=\"space\"></p>\n<h2 id=\"objectliterals\">Object Literals</h2>\n<p>Using the <strong>new Object()</strong> constructor can be quite convoluted and lengthy, but object literals provide shortcut for creating objects, but under the hood, <strong>new Object()</strong> is still being used.</p>\n<pre><code class=\"js\">\n    var person = {\n        id: 123,\n        firstname: \"John\",\n        lastname: \"Fischer\",\n        age: 24;\n        showMove : function(){\n            console.log(\"I can do a split!\");\n        };\n     }\n</code></pre>\n<p class=\"space\"></p>\n<h3 id=\"bpatternsforcreatingobjectsb\"><b>Patterns for creating Objects</b></h3>\n<p><b>Constructor Functions</b></p>\n<p>Constructor functions try to emulate the concept of classes in strongly typed languages such as C# and Java. There are some convention to adhere to though. The naming convention for constructor function starts with uppercase letter and the rest lowe-case letters.</p>\n<p><span class=\"text-danger\"><strong>Note:</strong></span> <em><mark>Functions are also objects. A function's prototype points to/inherits from Object which is the root object in JavaScript</mark></em></p>\n<pre><code class=\"js\">\n    function Person(firstname, lastname, age) {\n      this.firstname = firstname;\n      this.lastname = lastname;\n      this.age = age;\n      this.showMove = function(){\n        console.log(\"I can do a split!\");\n      }\n\n    }\n</code></pre>\n<p>With this pattern, all kind of Person object can be created say, Bob and Alice.</p>\n<pre><code class=\"js\">\n    let alice = new Person(\"Alice\", \"Guru\", 27);\n    let bob = new Person(\"Bob\", \"Don\", 32);\n</code></pre>\n<p>We now have Alice and Bob objects, and more can be created, but always pay attention that the constructor function is <strong>always</strong> instantiated or activated with the <em>new</em> keyword.</p>\n<p class=\"space\"></p>\n<p><b>Factory function</b><br>\nFactory function is a pattern for creating objects, and it's reusable. We see how this function can be used to enforce privacy in later series. For now, let's see how to create object using the factory pattern.</p>\n<pre><code class=\"js\">\n    function createPerson(firstname, lastname, age) {\n      return {\n        firstname,\n        lastname,\n        age,\n        showMove: function(){\n            console.log(\"I can do a split!\");\n        }\n      }\n\n    }\n    \n    let alice = createPerson(\"Alice\", \"Guru\", 27);\n    let bob = createPerson(\"Bob\", \"Don\", 32);\n</code></pre>\n<p class=\"space\"></p>\n<p><b>Prototype pattern</b><br>\nObjects can also be created in JavaScript using prototype property of an object.  <em>Remember</em> that every created object in JavaScript automatically has a prototype at the time of creation. Let's see how we can use prototype to create an object.</p>\n<pre><code class=\"js\">\n    function Person() {\n    }\n    \n    Person.prototype.firstname = \"Bob\";\n    Person.prototype.lastname = \"Guru\";\n    Person.prototype.age = 24;\n    Person.prototype.showMove = function(){\n      console.log(\"I can do a split!\");\n    }\n    \n</code></pre>\n<p>We shall examine prototype property further as it holds the key to OOP in JavaScript.</p>\n<p>This concludes the objection creation series. We'll use all we've learned so far in the next coming series to really make sense of OOP in JavaScript.</p>\n<p>Happy coding.</p>\n<!--kg-card-end: markdown-->","comment_id":"5ae569f4d8240f1f647a63c4","feature_image":"https://images.unsplash.com/photo-1527612820672-5b56351f7346?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","featured":false,"visibility":"public","send_email_when_published":false,"created_at":"2018-04-29T07:45:08.000+01:00","updated_at":"2019-07-07T19:53:07.000+01:00","published_at":"2018-05-02T16:55:00.000+01:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"url":"http://localhost:2368/object-creation-in-javascript/","excerpt":"This post is part of a series of posts on JavaScript object-oriented\nprogramming. Link to the series are as follows:\n\nThis series is as follows:\n\n 1. Pillars of Objected-Oriented Programming\n    [/pillars-of-objected-oriented-programming]\n 2. JavaScript Objects, prototype, constructor, & Object constructor\n    [/javascript-objects-prototype-constructor/]\n 3. Object Creation in JavaScript [/object-creation-in-javascript/]\n 4. JavaScript OOP : Abstraction\n    [/pillars-of-object-oriented-programmi","reading_time":2,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null},{"id":"5f37e7a7d486c307401b3ee3","uuid":"f0ba5175-c4e2-4f5b-bbea-bf3c9b3576bb","title":"JavaScript Objects, prototype, constructor, & Object constructor","slug":"javascript-objects-prototype-constructor","html":"<!--kg-card-begin: markdown--><p>This post is part of a series of posts on JavaScript object-oriented programming. Link to the series are as follows:</p>\n<p>This series is as follows:</p>\n<ol>\n<li><a href=\"http://localhost:2368/pillars-of-objected-oriented-programming\">Pillars of Objected-Oriented Programming</a></li>\n<li><a href=\"http://localhost:2368/javascript-objects-prototype-constructor/\">JavaScript Objects, prototype, constructor, &amp; Object constructor</a></li>\n<li><a href=\"http://localhost:2368/object-creation-in-javascript/\">Object Creation in JavaScript</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-abstraction-2/\">JavaScript OOP : Abstraction</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-encapsulation/\">JavaScript OOP : Encapsulation</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-inheritance\">JavaScript OOP : Inheritance</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-polymorphism\">JavaScript OOP : Polymorphism</a></li>\n<li><a http://localhost:2368/javascript-objects-prototype-constructor/href=\"\">JavaScript OOP : Inheritance vs Composition</a></li>\n</ol>\n<p class=\"space\"></p>\n<h2 id=\"javascriptobjects\"><strong>JavaScript Objects</strong></h2>\n<p>According to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects\">Mozilla</a>, JavaScript is designed on a simple object-based paradigm, and <mark><em>an object is a collection of properties, and property is an association between a name(or key) and a value. A property's value can be a function, in which case the property is known as a method.</em></mark></p>\n<p>In other words, an object is a collection of key=value pair.</p>\n<p>e.g      firstname = &quot;John&quot;, lastname = &quot;Fischer&quot; .  These two key-value pair can make up an object</p>\n<p class=\"space\"></p>\n<h4 id=\"objectsproperties\">Objects &amp; properties</h4>\n<p>To represent a <em>Person</em> object in JavaScript, let's use <em>Object</em> with is JavaScript in-built. It's the low-level way of creating an object.</p>\n<pre><code class=\"js\">\n    var person = new Object();\n    person.firstname = \"John\";\n    person.lastname = \"Fischer\"\n    person.age = 24\n</code></pre>\n<p>The person object has three properties, firstname, lastname, and age. Remember a property's value can also be a function which is refered to as a method. Methods add behaviour to an object. Let's add a behaviour to the person object.</p>\n<pre><code class=\"js\">\n    person.showSkill = function(){\n         console.log(\"I can code in JavaScript\")\n    }\n</code></pre>\n<p>It's possible to add more property to the object because JavaScript is a dynamic language and that's powerful.</p>\n<p><img src=\"http://localhost:2368/content/images/2018/04/object.png\" alt=\"object\"></p>\n<p class=\"space\"></p>\n<h2 id=\"prototypes\"><strong>Prototypes</strong></h2>\n<p>Now, this is the main thing that answers all questions you may have about OOP in JavaScript.</p>\n<p><b>What is prototype ?</b><br>\nIn simple English, a prototype is a blueprint, first design, a layout etc.   It is what it says.</p>\n<p>In almost every invention that has ever existed, they can all be traced to a prototype or a blueprint of some sort.</p>\n<p><strong>Note:</strong> When an object is created in JavaScript, a prototype object is also created and associated with that object.This happens all the time and almost all JavaScript's object prototype is <strong>Object</strong></p>\n<p>Let's inspect the person object we created earlier<br>\n<img src=\"https://cdn.glitch.com/5694ae69-e1a8-4701-a18f-ad933f1baa0c%2FScreenshot%202019-07-07%20at%2020.03.34.png\" alt=\"prototype\"></p>\n<p>Almost every object in JavaScript has prototype pointing to <strong>Object</strong> in JavaScript.</p>\n<p>An object's prototype can be accessed by using the <strong>__proto__</strong> or <strong>prototype</strong> properties.</p>\n<blockquote>\n<p>The <strong>prototype</strong> property of an object is used to access an object's prototype in constructor functions, functions that are instantiated using the <strong>new</strong> keyword</p>\n</blockquote>\n<blockquote>\n<p><strong>__proto__</strong> property is used to access prototype on object's instance.</p>\n</blockquote>\n<p>e.g person.<strong>__proto__</strong> &amp; &lt;constructor function &gt;.prototype. The person object we saw earlier is an example of an instance of an object which is <strong>Object</strong>, we can say person object is an instance of Object. From the person object above, we can clearly see there's no <strong>prototype</strong> property, but <strong>__proto__</strong> property.</p>\n<p class=\"space\"></p>\n<h2 id=\"constructorfunction Object() { [native code] }1\"><strong>constructor</strong></h2>\n<p>Constructor is found on the prototype object's property; it's a pointer or reference back to an object as the creator. This feature can be dynamically used to create an object dynamically, but that's a more advanced topic.</p>\n<p class=\"space\"></p>\n<h2 id=\"objectconstructor\"><strong>Object constructor</strong></h2>\n<blockquote>\n<p><em><mark>All objects in JavaScript are descended from Object; all objects inherit methods and properties from Object.prototype</mark></em></p>\n</blockquote>\n<blockquote>\n<p><em><mark>The Object constructor creates an object wrapper for the given value.</mark></em></p>\n</blockquote>\n<p>Every property available on the Object prototype is also available to all object created in javaScript. Object represents the global JavaScript Object. Object constructor and methods are preffered way of implementing prototypical inherirance and object creation. We will be seeing more of the Object constructor in action in the next series.</p>\n<p>In conclusion, almost everything in JavaScript resolves around Object. Understanding how Object works under the hood will pave way to understanding how OOP work in JavaScript. If the concepts of prototype is not very clear. We shall cement that in the next series.</p>\n<p>Happy coding !</p>\n<!--kg-card-end: markdown-->","comment_id":"5ae569d0d8240f1f647a63c2","feature_image":null,"featured":false,"visibility":"public","send_email_when_published":false,"created_at":"2018-04-29T07:44:32.000+01:00","updated_at":"2019-07-07T20:04:42.000+01:00","published_at":"2018-05-01T13:30:00.000+01:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"url":"http://localhost:2368/javascript-objects-prototype-constructor/","excerpt":"This post is part of a series of posts on JavaScript object-oriented\nprogramming. Link to the series are as follows:\n\nThis series is as follows:\n\n 1. Pillars of Objected-Oriented Programming\n    [/pillars-of-objected-oriented-programming]\n 2. JavaScript Objects, prototype, constructor, & Object constructor\n    [/javascript-objects-prototype-constructor/]\n 3. Object Creation in JavaScript [/object-creation-in-javascript/]\n 4. JavaScript OOP : Abstraction\n    [/pillars-of-object-oriented-programmi","reading_time":3,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null},{"id":"5f37e7a7d486c307401b3ee2","uuid":"25244a02-a145-4e44-8c44-00c4679073b2","title":"Pillars of Objected-Oriented Programming","slug":"pillars-of-objected-oriented-programming","html":"<!--kg-card-begin: markdown--><p>This post is part of a series of posts on JavaScript object-oriented programming. Link to the series are as follows:</p>\n<p>This series is as follows:</p>\n<ol>\n<li><a href=\"http://localhost:2368/pillars-of-objected-oriented-programming\">Pillars of Objected-Oriented Programming</a></li>\n<li><a href=\"http://localhost:2368/javascript-objects-prototype-constructor/\">JavaScript Objects, prototype, constructor, &amp; Object constructor</a></li>\n<li><a href=\"http://localhost:2368/object-creation-in-javascript/\">Object Creation in JavaScript</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-abstraction-2/\">JavaScript OOP : Abstraction</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-encapsulation/\">JavaScript OOP : Encapsulation</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-inheritance\">JavaScript OOP : Inheritance</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-polymorphism\">JavaScript OOP : Polymorphism</a></li>\n<li><a http://localhost:2368/pillars-of-objected-oriented-programming/href=\"\">JavaScript OOP : Inheritance vs Composition</a></li>\n</ol>\n<p>Object-oriented programming has four pillars which we will quickly go over. These pillars or concept define or set some guidelines on how to write codes to represent objects with characteristics and behaviours. E.g., A person may be described as an object with attributes like first name, last name, date of Birth and a person can eat, walk, run, and dance.</p>\n<p>The four pillars are namely,  <strong>Abstraction</strong>, <strong>Encapsulation</strong>, <strong>Inheritance</strong>, and <strong>Polymorphism</strong>.</p>\n<h3 id=\"abstraction\">Abstraction</h3>\n<p>An abstraction in object-oriented programming (OOP) is the process of hiding away the complexity of an object's internal implementation details and present relevant information without noise. An example of abstraction in the real world is a simple cassette player</p>\n<p><img src=\"https://images.unsplash.com/photo-1495369470453-f6af4ade471b?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=1b9c2148b9404faac82511c12524ffe7&amp;auto=format&amp;fit=crop&amp;w=1350&amp;q=80\" alt=\"Casset player\"></p>\n<p>This cassette player has few buttons on it, but the implementation details of how the electronics embedded inside work are abstracted away, it's hidden, and all that's useful to a music listener is the play, pause, forward, rewind and record buttons. The details of how the capacitors, diode , resistors, circuit board work is of no importance and as a music listener, I don't know want know either.</p>\n<h3 id=\"encapsulation\">Encapsulation</h3>\n<p>In a simple sentence, encapsulation is the process of hiding internal details or implementation from the outside such that it helps prevent tampering and accidental modification. As you programming more and create objects, you will quickly realise some details should never leak as a result of our code which could lead to serious problems like data breach, losing sensitive data and confidentiality. Different programming languages use different implementation to achieve encapsulation. In the coming post, we will see how we can implement encapsulation in JavaScript which is a bit different from strongly typed languages like C# and Java.</p>\n<h3 id=\"inheritance\">Inheritance</h3>\n<p>Inheritance in OOP is just like inheritance in real life whereby a child inherits the parent(s) trait(s) such as eye colours, height etc.  Inheritance describes an &quot;IS-A&quot; relationship e.g. a dog is an Animal etc. Inheritance in OOP helps reduce code duplication by re-using codes or sharing codes. E.g. You are writing an application for a vet. You have to ensure that your application can handle check-in and check-out of all kinds of animal. The only way to make this possible is by re-using code. In this case, you will have a base object called Animal with general characteristics animal characteristics and have, e.g. dogs; cat inherits from the Animal class. In conclusion, inheritance is the ability of a child object to inherit a parent object properties and behaviours in addition to its own.</p>\n<h3 id=\"polymorphism\">Polymorphism</h3>\n<p><em>Poly</em> means many, and <em>morphism</em> means forms. Polymorphism is the ability of an object to exist or represented in many forms. In OOP, child or children object may inherit behaviour from a parent object and override or implement that object differently from the parent.  In conclusion, <em>polymorphism</em> is the ability of an object to change behaviour at runtime.</p>\n<h3 id=\"composition\">Composition</h3>\n<p>Composition is an important OOP concept worth mentioning. It's not one of the four listed pillars of OOP, but OOP is not complete without it. Unlike inheritance, composition is a <em>&quot;HAS-A&quot;</em> relationship. A dog is an animal, but a dog has an owner. An object representing a dog will relate to the animal object by inheritance, but relate to owner through composition.</p>\n<p>This concludes the information needed to delve into the concepts of OOP deeper.</p>\n<!--kg-card-end: markdown-->","comment_id":"5ae569bad8240f1f647a63c0","feature_image":"https://images.unsplash.com/photo-1523500979934-bdf0933261d2?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ&s=2dfea8d7ccac5dc4419f4c2bd9df972d","featured":false,"visibility":"public","send_email_when_published":false,"created_at":"2018-04-29T07:44:10.000+01:00","updated_at":"2018-07-27T03:33:29.000+01:00","published_at":"2018-04-29T15:24:00.000+01:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"url":"http://localhost:2368/pillars-of-objected-oriented-programming/","excerpt":"This post is part of a series of posts on JavaScript object-oriented\nprogramming. Link to the series are as follows:\n\nThis series is as follows:\n\n 1. Pillars of Objected-Oriented Programming\n    [/pillars-of-objected-oriented-programming]\n 2. JavaScript Objects, prototype, constructor, & Object constructor\n    [/javascript-objects-prototype-constructor/]\n 3. Object Creation in JavaScript [/object-creation-in-javascript/]\n 4. JavaScript OOP : Abstraction\n    [/pillars-of-object-oriented-programmi","reading_time":3,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null},{"id":"5f37e7a7d486c307401b3eea","uuid":"3939985a-8e46-453f-ad9a-afe7daf18608","title":"Object-Oriented JavaScript","slug":"javascript-object-oriented-programming-introduction","html":"<!--kg-card-begin: markdown--><p>For a while, the concept of OOP in Javascript bewildered me that I tried on several occasions to avoid it in the past. Avoiding it didn't help, it kept haunting me everywhere I turned as a software developer. Having been in such position, I will help you demystify Object Oriented Programming in JavaScript, and you will never be scared again just like I was.</p>\n<p>This post will be divided up into mini-series to help us keep things light, easy to grasp and remember.  These series assume you have some knowledge of Javascript and you want to understand how OOP works in JavaScript.</p>\n<p>This series is as follows:</p>\n<ol>\n<li><a href=\"http://localhost:2368/pillars-of-objected-oriented-programming\">Pillars of Objected-Oriented Programming</a></li>\n<li><a href=\"http://localhost:2368/javascript-objects-prototype-constructor/\">JavaScript Objects, prototype, constructor, &amp; Object constructor</a></li>\n<li><a href=\"http://localhost:2368/object-creation-in-javascript/\">Object Creation in JavaScript</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-abstraction-2/\">JavaScript OOP : Abstraction</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-encapsulation/\">JavaScript OOP : Encapsulation</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-inheritance\">JavaScript OOP : Inheritance</a></li>\n<li><a href=\"http://localhost:2368/pillars-of-object-oriented-programming-polymorphism\">JavaScript OOP : Polymorphism</a></li>\n<li><a http://localhost:2368/javascript-object-oriented-programming-introduction/href=\"\">JavaScript OOP : Inheritance vs Composition</a></li>\n</ol>\n<p>We now have our content structure to follow, let's get started here: <a href=\"http://localhost:2368/pillars-of-objected-oriented-programming/\">Pillars of Objected-Oriented Programming</a></p>\n<!--kg-card-end: markdown-->","comment_id":"5ae572d9d8240f1f647a63dc","feature_image":"http://localhost:2368/content/images/2020/08/OOP-JS.png","featured":true,"visibility":"public","send_email_when_published":false,"created_at":"2018-04-29T08:23:05.000+01:00","updated_at":"2020-08-17T21:58:21.000+01:00","published_at":"2018-04-29T08:23:54.000+01:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"url":"http://localhost:2368/javascript-object-oriented-programming-introduction/","excerpt":"For a while, the concept of OOP in Javascript bewildered me that I tried on\nseveral occasions to avoid it in the past. Avoiding it didn't help, it kept\nhaunting me everywhere I turned as a software developer. Having been in such\nposition, I will help you demystify Object Oriented Programming in JavaScript,\nand you will never be scared again just like I was.\n\nThis post will be divided up into mini-series to help us keep things light, easy\nto grasp and remember. These series assume you have some k","reading_time":1,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null},{"id":"5f37e7a7d486c307401b3edf","uuid":"3ff61700-90a9-40ca-bccf-72e7d2c149c0","title":"S.O.L.I.D Principle of OOP","slug":"s-o-l-i-d-principle-of-oop","html":"<!--kg-card-begin: markdown--><p>In this post, I try to leave out the intricacies of the SOLID principle and write about it succinctly in detail, but yet simple codes samples. Let’s get started</p>\n<p>The SOLID principle is a design pattern that enables and disciplines us to write reusable, decoupled, and maintainable code. That is as simple as it can get.</p>\n<p>Now, we know what the  SOLID principles want to get out of us, let’s briefly talk about what makes a code SOLID.  SOLID codes have to satisfy SOLID principle checklist which leads us to the SOLID acronym and what it means.</p>\n<ul>\n<li>S: Single Responsible Principle (SRP)</li>\n<li>O: Open Closed Principle (OSP)</li>\n<li>L: Liskov Substituion Principle</li>\n<li>I: Interface Segregation Principle (ISP)</li>\n<li>D: Dependency Inversion Principle (DIP)</li>\n</ul>\n<p>Let’s go throw each with code walkthrough</p>\n<h2 id=\"ssingleresponsibleprinciplesrp\">S: Single Responsible Principle (SRP)</h2>\n<blockquote>\n<p><em><p class=\"strong-point-highlight\">A class should have only one reason to change</p></em></p>\n</blockquote>\n<p>SRP says that a class should focus on one specific thing rather than do multiple things.  The SRP simple does not mean a class should have only one method, but everything the class does should revolve around one thing.<br>\nFor example, a <b>Person</b> class might have the responsibility of carrying out a various operation such as creating a new person’s record, update, delete,  and retrieve from a data store. The class can also be tasked on how to present information to a user such as print, display, sending email, logging etc.</p>\n<p>Mixing up responsibility makes a class unmaintainable, challenging to understand and makes writing unit tests a nightmare because the responsibilities cannot be separated and thus ultimately violates SRP.</p>\n<p class=\"space\"></p>\n<p>Let’s see an example of SRP violation:</p>\n<pre><code class=\"lang-cs\">\n    public class Person\n    {\n        public Guid PersonId { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        private decimal Salary { get; set; }\n\n        private string Mydocpath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);\n\n        public string FullName()\n        {\n            return $\"{FirstName} - {LastName}\";\n        }\n\n        public decimal GetSalary()\n        {\n            return this.Salary;\n        }\n\n        public void IncreaseSalary(decimal percentage)\n        {\n            this.Salary += this.Salary * percentage;\n        }\n\n        public void SavePerson()\n        {\n            try\n            {\n                // code for saving person to a data store\n\n                //After a person has been saved, we send confirmation email\n                var mailMessage = new MailMessage(\"MailFrom\", \"MailTo\", \"Subject\", \"Body\");\n                this.SendEmail(mailMessage);\n\n            }\n            catch (Exception e)\n            {\n                System.IO.File.WriteAllText(this.Mydocpath + @\"\\Exceptionsfile.txt\", e.ToString());\n            }\n        }\n\n        public void SendEmail(MailMessage mail)\n        {\n            try\n            {\n                // Code for getting Email setting and send mail\n            }\n            catch (Exception e)\n            {\n                System.IO.File.WriteAllText(this.Mydocpath + @\"\\Exceptionsfile.txt\", e.ToString());\n            }\n        }\n\n    }\n</code></pre>\n<p>The <em>Person</em> class violates SRP, as it behaves like a God Object. A <em>God Object</em> is a class which does everything. An example of a <em>God Object</em> is this:</p>\n<p><img src=\"http://static.everypixel.com/ep-pixabay/1818/9349/2262/83574/18189349226283574929-swiss_army_knife.jpg\" alt=\"swiss army knife\"></p>\n<p>The Swiss army knife in the pictures does so much than just being a pocket tool. It can also store your files <i class=\"far fa-smile\"></i>.</p>\n<p>Back to the <em>Person</em> class which carries out own responsibilities such as get full name, get a salary, increase salary and also sending emails and logging as well.</p>\n<p>The <em><mark>&quot;A class should have only one reason to change&quot;</mark></em> will not be met if for example, you want to modify the email, logging functionalities or perhaps writing a unit test to test each feature.</p>\n<h3 id=\"solution\">Solution:</h3>\n<p>Let's refactor the code to satisfy SRP</p>\n<pre><code class=\"cs\">\n    public class Person\n    {\n        public Guid PersonId { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        private decimal Salary { get; set; }\n\n        private FileLogger fileLogger;\n        private MailSender mailSender;\n\n\n        public Person()\n        {\n            fileLogger = new FileLogger();\n            mailSender = new MailSender();\n        }\n\n        public string FullName()\n        {\n            return $\"{FirstName} - {LastName}\";\n        }\n\n        public decimal GetSalary()\n        {\n            return this.Salary;\n        }\n\n        public void IncreaseSalary(decimal percentage)\n        {\n            this.Salary += this.Salary * percentage;\n        }\n\n        public void SavePerson()\n        {\n            try\n            {\n                // code for saving person to a data store\n\n                //After a person has been saved, we send confirmation email\n                //Abstracting away how email is being sent\n                fileLogger.Info(\"Add method Start\");\n                // Code for adding invoice\n                // Once Invoice has been added , send mail \n                mailSender.From = \"contact@gmail.com\";\n                mailSender.To = \"recipient@google.com\";\n                mailSender.Subject = \"Verification\";\n                mailSender.Body = \"This is an email message for Bob and Alice\";\n                mailSender.SendEmail();\n            }\n            catch (Exception e)\n            {\n                fileLogger.Error(\"Exception message\", e);\n            }\n        }\n\n    }\n\n\n\n\n    public interface ILogger\n    {\n        void Info(string info);\n        void Debug(string info);\n        void Error(string info, Exception e);\n    }\n\n    public class FileLogger : ILogger\n    {\n        private string MyDocpath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);\n\n        public FileLogger()\n        {\n            //Initialization code(s)\n        }\n\n        public void Info(string info)\n        {\n            // Code for details to text file \n        }\n\n        public void Debug(string info)\n        {\n            // Code for debug information to text file \n        }\n\n        public void Error(string message, Exception ex)\n        {\n            // Code for erros with message and exception details\n        }\n    }\n\n\n    public class MailSender\n    {\n        public string From { get; set; }\n        public string To { get; set; }\n        public string Subject { get; set; }\n        public string Body { get; set; }\n\n        public void SendEmail()\n        {\n            // Code for sending mail\n        }\n    }\n</code></pre>\n<p>Now the <em>Person</em> class can focus on what it knows how to do best, and that is how to create, save, calculate salary about a user and cares less about sending emails or logging hence satisfies the <em><mark>Single Responsibility Princciple</mark></em>. The other tasks of logging and email sending are delegated to the responsible classes separating the concerns and responsibilities.</p>\n<p class=\"space\"></p>\n<h2 id=\"oopenclosedprincipleosp\">O: Open Closed Principle (OSP)</h2>\n<blockquote>\n<p><em><p class=\"strong-point-highlight\">Software entities (classes, modules, functions, etc) should be open for extension , but closed for modification.</p></em></p>\n</blockquote>\n<p>To put it in a simple sentence, <mark>change a class behaviour using inheritance and composition.</mark></p>\n<p><mark>&quot;Open for extension&quot;</mark> means we ought to design our classes in a way that will allow new feature or functionality to be added when new requirements arise or a change of request comes up. <mark>&quot;Closed for modification means&quot;</mark> we should not alter codes that have already gone through design, coding, unit testing and it is in-production unless it is a bug.</p>\n<p>Let's demonstrate OSP using codes using a <mark><em>Shape</em></mark> class.</p>\n<p>OSP violation:</p>\n<pre><code class=\"cs\">\n    public enum ShapeType\n    {\n        Triangle, Rectangle, Circle\n    }\n\n    public class Shape\n    {\n        public ShapeType ShapeType { get; set; }\n        public double Width { get; set; }\n        public double Height { get; set; }\n\n        public string CalculateArea( )\n        {\n            var calculatedArea = default(double);\n\n            if (ShapeType == ShapeType.Triangle)\n            {\n                calculatedArea =  Height * Width;\n            }else if (ShapeType == ShapeType.Triangle)\n            {\n                calculatedArea = 0.5 * Width * Height;\n            }\n            else if(ShapeType == ShapeType.Circle)\n            {\n                calculatedArea = Math.PI * Math.Pow(Height, 2);\n            }\n\n            return calculatedArea.ToString(CultureInfo.InvariantCulture);\n        }\n    }\n</code></pre>\n<p>Now, this simple <mark><em>Shape</em></mark> class represents a shape and calculates its area. This scenario will work well without issues only if we have to calculate only three shapes, Triangle, Rectangle Circle. What if we need to calculate the area of a sphere tomorrow or a rhombus? We will have to alter the <mark><em>Shape</em></mark> class and add one or more if condition to satisfy the requirement and equally alter the enum to add the new type of shape. Adding more if conditions to cater to new shapes will quickly run out of hands and make the code unmaintainable and difficult to test. Hence, the class is not <mark>&quot;closed for modification&quot;</mark>.</p>\n<p class=\"space\"></p>\n<p>Let's make the <mark><em>Shape</em></mark> class &quot;Open for extension, but closed for modification&quot; hence satisfying OSP.</p>\n<h4 id=\"ospsolution\">OSP solution:</h4>\n<pre><code>\n    public abstract class Shape\n    {\n        public abstract double CalculateArea();\n    }\n\n\n    public class Triangle : Shape\n    {\n        public double Base { get; set; }\n        public double Height { get; set; }\n\n        public override double CalculateArea()\n        {\n            return 0.5 * Base * Height;\n        }\n    }\n\n\n    public class Cirle : Shape\n    {\n        public double Radius { get; set; }\n        public override double CalculateArea()\n        {\n            return Math.PI * (Radius * Radius);\n        }\n    }\n</code></pre>\n<p>Now that looks much better. The <mark><em>Shape</em></mark> class is now closed for modification because to add a new feature of calculating a new shape, we don't alter or modify the Shape class. Instead, we extended it by using inheritance.</p>\n<p>Extending the Shape class further by adding the rhombus shape will look like this:</p>\n<pre><code>\n    public class Rhombus : Shape\n    {\n        public double Diagonal { get; set; }\n        public override double CalculateArea()\n        {\n            return (1/2) * Diagonal * Diagonal;\n        }\n    }\n</code></pre>\n<p>Viola! we have satisfied OSP.</p>\n<p class=\"space\"></p>\n<p class=\"space\"></p>\n<h2 id=\"lliskovsubstitutionprinciplelsp\">L: Liskov Substitution Principle (LSP)</h2>\n<blockquote>\n<p><em><p class=\"strong-point-highlight\">Objects in a program should be replacable with instances of their subtypes without altering the correctness of the that program.</p></em></p>\n</blockquote>\n<p>In a simple translation, a child class can replace a parent class in a code, and it should not break that code. e.g. If class Dog is a child(derived class) of class Animal(base class), then instances of Dog can replace the instance of Animal without issue. Liskov substitution principle goes a bit deeper, but for a simple explanation is a good starting position.</p>\n<p><strong>Note:</strong> <mark><em>LSP is about honoring contracts and not intending to change the behaviour of a base class.</em></mark></p>\n<p>The code below violates LSP in that derived class Square changed the behaviour of the base class.</p>\n<p>Violation of LSP:</p>\n<pre><code>\n    public class Rectangle\n    {\n        public virtual Int32 Height { get; set; }\n        public virtual Int32 Width { get; set; }\n\n        public virtual void CalculateArea()\n        {\n            Console.WriteLine($\"The area is: {Height * Width}\");\n        }\n    }\n\n    public class Square : Rectangle\n    {\n        public override Int32 Height\n        {\n            get => base.Height;\n            set => SetDimensions(value);\n        }\n\n        public override Int32 Width\n        {\n            get => base.Width;\n            set => SetDimensions(value);\n        }\n\n        private void SetDimensions(Int32 value)\n        {\n            base.Height = value;\n            base.Width = value;\n        }\n    }\n</code></pre>  \n<p>Giving the above code, a quick run, the output says The area is 9, which is correct as the area of a square is (width)<sup>2</sup>. <span class=\"text-danger\">But!</span> this violates the LSP that states that a derived class should replace a base class without breaking or altering the program.</p>\n<pre><code>\n    static void Main(string[] args)\n    {\n        Rectangle rectangle = new Square();\n        rectangle.Height = 2;\n        rectangle.Width = 3;\n\n        rectangle.CalculateArea(); // The area is 9\n        Console.ReadKey();\n    }\n</code></pre>  \n<p>Let implement the code to become LSP compliant. The solution to this problem is not straightforward, but let have a look. Remember the OCP, if a code is OCP complaint, that code is more likely to be LSP compliant as well. <mark><em>As a rule of thumb, try to move implementation that may differ to the derived classes and leave the more general implementation to the base class.</em></mark></p>\n<pre><code>\n    public interface IShape\n    {\n        void CalculateArea();\n    }\n\n    public class Square : IShape\n    {\n        public double Width { get; set; }\n        public void CalculateArea()\n        {\n            Console.WriteLine($\"The area is {Math.Pow(Width, 2)}\");\n        }\n    }\n\n    public class Rhombus : IShape\n    {\n        public double Diagonal { get; set; }\n        public void CalculateArea()\n        {\n            Console.WriteLine($\"The area is: {(1 / 2) * Diagonal * Diagonal}\");\n        }\n    }\n</code></pre>    \n<p>The base class IShape contract is now implemented by Square and Rhombus with no violation by not allowing the subclasses to change the behaviour of the base class.</p>\n<p><strong>Important:</strong> If a code is OSP complaint, it is likely, it is  LSP complaint as both go hand in hand.</p>\n<p class=\"space\"></p>\n<p class=\"space\"></p>\n<h2 id=\"iinterfacesegregationprincipleisp\">I: Interface Segregation Principle (ISP)</h2>\n<blockquote>\n<p><em><p class=\"strong-point-highlight\">No client should be forced to depend on methods it does not need. Split large interfaces into smaller and more specific ones so clients can pick and choose methods that are of interest to them.</p></em></p>\n</blockquote>\n<p>In a simple sentence, this means a derived class should only implement what it needs and not all methods in the parent class or interface.</p>\n<p>Using the analogy of a manager, a lead developer, and a developer.</p>\n<p>Violation of ISP:</p>\n<pre><code>\n    public interface ILead\n    {\n        void CreateSubTask();\n        void AssginTask();\n        void WorkOnTask();\n    }\n\n    public class Developer : ILead\n    {\n        public void CreateSubTask()\n        {\n            throw new Exception(\"Cannot create subtasks\");\n        }\n\n        public void AssginTask()\n        {\n            throw new Exception(\"Cannot assign tasks\");\n        }\n\n        public void WorkOnTask()\n        {\n            //codes to implement working on tasks\n        }\n    }\n\n    public class LeadDeveloper : ILead\n    {\n        public void CreateSubTask()\n        {\n            //code to create subtasks\n        }\n\n        public void AssginTask()\n        {\n            //code to assign tasks\n        }\n\n        public void WorkOnTask()\n        {\n            //codes to implement working on tasks\n        }\n    }\n\n    public class Manager : ILead\n    {\n        public void CreateSubTask()\n        {\n            //code to create subtasks\n        }\n\n        public void AssginTask()\n        {\n            //code to assign tasks\n        }\n\n        public void WorkOnTask()\n        {\n            throw new Exception(\"Manager cannot work on programming tasks\");\n        }\n    }\n</code></pre>    \n<p>We have three roles in that a Manager cannot work on tasks and no can assign a task to a manger aside from the manager's boss if there's another layer of hierarchy. But the Manager implements the <mark>WorkOnTask()</mark> method it doesn't need. Same for the Developer class, a developer cannot create subtasks and assign tasks hence should not be implementing both methods. As for the LeadDeveloper, it implements all method on the ILead interface as needed.</p>\n<h3 id=\"solution\">Solution:</h3>\n<p>The solution is to split the interfaces into manageable chunks to clients can pick and choose what they need to implement.</p>\n<pre><code>\n    public interface ILead\n    {\n        void CreateSubTask();\n        void AssginTask();\n    }\n\n    public interface IProgrammer\n    {\n        void WorkOnTask();\n    }\n\n    public class Developer : IProgrammer\n    {\n        public void WorkOnTask()\n        {\n            //codes to implement working on tasks\n        }\n    }\n\n    public class LeadDeveloper : ILead, IProgrammer\n    {\n        public void CreateSubTask()\n        {\n            //code to create subtasks\n        }\n\n        public void AssginTask()\n        {\n            //code to assign tasks\n        }\n\n        public void WorkOnTask()\n        {\n            //codes to implement working on tasks\n        }\n    }\n\n    public class Manager : ILead\n    {\n        public void CreateSubTask()\n        {\n            //code to create subtasks\n        }\n\n        public void AssginTask()\n        {\n            //code to assign tasks\n        }\n    }\n</code></pre>  \n<p class=\"space\"></p>\n<p class=\"space\"></p>\n<h2 id=\"ddependencyinversionprincipledip\">D: Dependency Inversion Principle (DIP)</h2>\n<blockquote>\n<p><em><p class=\"strong-point-highlight\">High level modules should not depend on low level modules, Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions</p></em></p>\n</blockquote>\n<p>In a simple sentence, high-level modules and low-level module should be loosely coupled as much as possible. They need not know the detail implementation of each other, in other words, they should depend on a contract.</p>\n<p>Let's use the example of a notification system where we can either send Email, SMS or Mail depending on a user choosing. Alternatively, all three if the user opt-in for all.</p>\n<h4 id=\"violationofdip\">Violation of DIP:</h4>\n<pre><code>\n    public class Email\n    {\n        public string ToAddress { get; set; }\n        public string Subject { get; set; }\n        public string Content { get; set; }\n        public void SendEmail()\n        {\n            //Send email\n        }\n    }\n\n    public class SMS\n    {\n        public string PhoneNumber { get; set; }\n        public string Message { get; set; }\n        public void SendSMS()\n        {\n            //Send sms\n        }\n    }\n    \n    public class Mail\n    {\n        public string Address { get; set; }\n        public string Message { get; set; }\n        public void SendMail()\n        {\n            //Send Mail by post\n        }\n    }\n    \n    public class Notification\n    {\n        private Email _email;\n        private SMS _sms;\n        private Mail _mail;\n        public Notification()\n        {\n            _email = new Email();\n            _sms = new SMS();\n            _mail = new Mail();\n        }\n\n        public void Send()\n        {\n            _email.SendEmail();\n            _sms.SendSMS();\n            _mail.SendMail();\n        }\n    }\n</code></pre>    \n<p>As we can see from the code sample above, the higher-level (Notification) module has dependencies on Email, SMS, and Mail modules, which are lower-level modules which violate DIP, and the also violates Single Responsibility Principle.</p>\n<h4 id=\"solution\">Solution:</h4>\n<pre><code>\n    public interface IMessage\n    {\n        void SendMessage();\n    }\n    \n    public class Email : IMessage\n    {\n        public string ToAddress { get; set; }\n        public string Subject { get; set; }\n        public string Content { get; set; }\n        public void SendMessage()\n        {\n            //Send Email\n        }\n    }\n\n    public class SMS : IMessage\n    {\n        public string PhoneNumber { get; set; }\n        public string Message { get; set; }\n        public void SendMessage()\n        {\n            //Send SMS\n        }\n    }\n    \n    public class Mail : IMessage\n    {\n        public string Address { get; set; }\n        public string Message { get; set; }\n        public void SendMessage()\n        {\n            //Send Mail by post\n        }\n    }\n</code></pre>  \n<p>The Notification system can now do one thing and one thing only. Send message without bothering about the implementation details, but depend on abstraction.</p>\n<pre><code>\n    public class Notification\n    {\n        private ICollection<IMessage> _messages;\n\n        public Notification(ICollection<IMessage> messages)\n        {\n            this._messages = messages;\n        }\n        public void SendMessage()\n        {\n            foreach(var message in _messages)\n            {\n                message.SendMessage();\n            }\n        }\n    }\n</code></pre> \n<p>This concludes <strong>SOLID</strong> principles. Hope you've learned something today. Happy Coding!</p>\n<!--kg-card-end: markdown-->","comment_id":"5ad74e522f7aa01770eb2e4b","feature_image":"http://localhost:2368/content/images/2020/08/Solid.jpg","featured":true,"visibility":"public","send_email_when_published":false,"created_at":"2018-04-18T14:55:30.000+01:00","updated_at":"2020-08-17T22:00:17.000+01:00","published_at":"2018-04-22T06:48:20.000+01:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"url":"http://localhost:2368/s-o-l-i-d-principle-of-oop/","excerpt":"In this post, I try to leave out the intricacies of the SOLID principle and\nwrite about it succinctly in detail, but yet simple codes samples. Let’s get\nstarted\n\nThe SOLID principle is a design pattern that enables and disciplines us to write\nreusable, decoupled, and maintainable code. That is as simple as it can get.\n\nNow, we know what the SOLID principles want to get out of us, let’s briefly talk\nabout what makes a code SOLID. SOLID codes have to satisfy SOLID principle\nchecklist which leads u","reading_time":9,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null}],"meta":{"pagination":{"page":1,"limit":15,"pages":1,"total":13,"next":null,"prev":null}}}